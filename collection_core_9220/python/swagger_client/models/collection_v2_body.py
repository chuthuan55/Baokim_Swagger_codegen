# coding: utf-8

"""
    Example for response examples value

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CollectionV2Body(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_id': 'str',
        'request_time': 'str',
        'partner_code': 'str',
        'operation': 'float',
        'create_type': 'str',
        'acc_name': 'str',
        'collect_amount_min': 'float',
        'collect_amount_max': 'float',
        'acc_no': 'str',
        'order_id': 'str',
        'expire_date': 'str'
    }

    attribute_map = {
        'request_id': 'RequestId',
        'request_time': 'RequestTime',
        'partner_code': 'PartnerCode',
        'operation': 'Operation',
        'create_type': 'CreateType',
        'acc_name': 'AccName',
        'collect_amount_min': 'CollectAmountMin',
        'collect_amount_max': 'CollectAmountMax',
        'acc_no': 'AccNo',
        'order_id': 'OrderId',
        'expire_date': 'ExpireDate'
    }

    def __init__(self, request_id=None, request_time=None, partner_code=None, operation=None, create_type=None, acc_name=None, collect_amount_min=None, collect_amount_max=None, acc_no=None, order_id=None, expire_date=None):  # noqa: E501
        """CollectionV2Body - a model defined in Swagger"""  # noqa: E501
        self._request_id = None
        self._request_time = None
        self._partner_code = None
        self._operation = None
        self._create_type = None
        self._acc_name = None
        self._collect_amount_min = None
        self._collect_amount_max = None
        self._acc_no = None
        self._order_id = None
        self._expire_date = None
        self.discriminator = None
        if request_id is not None:
            self.request_id = request_id
        if request_time is not None:
            self.request_time = request_time
        if partner_code is not None:
            self.partner_code = partner_code
        if operation is not None:
            self.operation = operation
        if create_type is not None:
            self.create_type = create_type
        if acc_name is not None:
            self.acc_name = acc_name
        if collect_amount_min is not None:
            self.collect_amount_min = collect_amount_min
        if collect_amount_max is not None:
            self.collect_amount_max = collect_amount_max
        if acc_no is not None:
            self.acc_no = acc_no
        if order_id is not None:
            self.order_id = order_id
        if expire_date is not None:
            self.expire_date = expire_date

    @property
    def request_id(self):
        """Gets the request_id of this CollectionV2Body.  # noqa: E501

        Unique code   # noqa: E501

        :return: The request_id of this CollectionV2Body.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this CollectionV2Body.

        Unique code   # noqa: E501

        :param request_id: The request_id of this CollectionV2Body.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def request_time(self):
        """Gets the request_time of this CollectionV2Body.  # noqa: E501

        Time send the request from PARTNER , format: YYYY-MM-DD HH:MM:SS.  # noqa: E501

        :return: The request_time of this CollectionV2Body.  # noqa: E501
        :rtype: str
        """
        return self._request_time

    @request_time.setter
    def request_time(self, request_time):
        """Sets the request_time of this CollectionV2Body.

        Time send the request from PARTNER , format: YYYY-MM-DD HH:MM:SS.  # noqa: E501

        :param request_time: The request_time of this CollectionV2Body.  # noqa: E501
        :type: str
        """

        self._request_time = request_time

    @property
    def partner_code(self):
        """Gets the partner_code of this CollectionV2Body.  # noqa: E501

        Unique code BAOKIM provide  # noqa: E501

        :return: The partner_code of this CollectionV2Body.  # noqa: E501
        :rtype: str
        """
        return self._partner_code

    @partner_code.setter
    def partner_code(self, partner_code):
        """Sets the partner_code of this CollectionV2Body.

        Unique code BAOKIM provide  # noqa: E501

        :param partner_code: The partner_code of this CollectionV2Body.  # noqa: E501
        :type: str
        """

        self._partner_code = partner_code

    @property
    def operation(self):
        """Gets the operation of this CollectionV2Body.  # noqa: E501

        9001: create va - 9002: update va  # noqa: E501

        :return: The operation of this CollectionV2Body.  # noqa: E501
        :rtype: float
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this CollectionV2Body.

        9001: create va - 9002: update va  # noqa: E501

        :param operation: The operation of this CollectionV2Body.  # noqa: E501
        :type: float
        """

        self._operation = operation

    @property
    def create_type(self):
        """Gets the create_type of this CollectionV2Body.  # noqa: E501

        Fix = 2  # noqa: E501

        :return: The create_type of this CollectionV2Body.  # noqa: E501
        :rtype: str
        """
        return self._create_type

    @create_type.setter
    def create_type(self, create_type):
        """Sets the create_type of this CollectionV2Body.

        Fix = 2  # noqa: E501

        :param create_type: The create_type of this CollectionV2Body.  # noqa: E501
        :type: str
        """

        self._create_type = create_type

    @property
    def acc_name(self):
        """Gets the acc_name of this CollectionV2Body.  # noqa: E501

        The name of Account holder (name of USER)  # noqa: E501

        :return: The acc_name of this CollectionV2Body.  # noqa: E501
        :rtype: str
        """
        return self._acc_name

    @acc_name.setter
    def acc_name(self, acc_name):
        """Sets the acc_name of this CollectionV2Body.

        The name of Account holder (name of USER)  # noqa: E501

        :param acc_name: The acc_name of this CollectionV2Body.  # noqa: E501
        :type: str
        """

        self._acc_name = acc_name

    @property
    def collect_amount_min(self):
        """Gets the collect_amount_min of this CollectionV2Body.  # noqa: E501

        collect amount min (50.000)  # noqa: E501

        :return: The collect_amount_min of this CollectionV2Body.  # noqa: E501
        :rtype: float
        """
        return self._collect_amount_min

    @collect_amount_min.setter
    def collect_amount_min(self, collect_amount_min):
        """Sets the collect_amount_min of this CollectionV2Body.

        collect amount min (50.000)  # noqa: E501

        :param collect_amount_min: The collect_amount_min of this CollectionV2Body.  # noqa: E501
        :type: float
        """

        self._collect_amount_min = collect_amount_min

    @property
    def collect_amount_max(self):
        """Gets the collect_amount_max of this CollectionV2Body.  # noqa: E501

        collect amount min (50.000.000)  # noqa: E501

        :return: The collect_amount_max of this CollectionV2Body.  # noqa: E501
        :rtype: float
        """
        return self._collect_amount_max

    @collect_amount_max.setter
    def collect_amount_max(self, collect_amount_max):
        """Sets the collect_amount_max of this CollectionV2Body.

        collect amount min (50.000.000)  # noqa: E501

        :param collect_amount_max: The collect_amount_max of this CollectionV2Body.  # noqa: E501
        :type: float
        """

        self._collect_amount_max = collect_amount_max

    @property
    def acc_no(self):
        """Gets the acc_no of this CollectionV2Body.  # noqa: E501

        Required when update:VA number need to update information. If create VA, send NULL  # noqa: E501

        :return: The acc_no of this CollectionV2Body.  # noqa: E501
        :rtype: str
        """
        return self._acc_no

    @acc_no.setter
    def acc_no(self, acc_no):
        """Sets the acc_no of this CollectionV2Body.

        Required when update:VA number need to update information. If create VA, send NULL  # noqa: E501

        :param acc_no: The acc_no of this CollectionV2Body.  # noqa: E501
        :type: str
        """

        self._acc_no = acc_no

    @property
    def order_id(self):
        """Gets the order_id of this CollectionV2Body.  # noqa: E501

        Unique id for each VA  # noqa: E501

        :return: The order_id of this CollectionV2Body.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this CollectionV2Body.

        Unique id for each VA  # noqa: E501

        :param order_id: The order_id of this CollectionV2Body.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def expire_date(self):
        """Gets the expire_date of this CollectionV2Body.  # noqa: E501

        Expire date. Format: YYYYMM-DD HH:II:SS  # noqa: E501

        :return: The expire_date of this CollectionV2Body.  # noqa: E501
        :rtype: str
        """
        return self._expire_date

    @expire_date.setter
    def expire_date(self, expire_date):
        """Sets the expire_date of this CollectionV2Body.

        Expire date. Format: YYYYMM-DD HH:II:SS  # noqa: E501

        :param expire_date: The expire_date of this CollectionV2Body.  # noqa: E501
        :type: str
        """

        self._expire_date = expire_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CollectionV2Body, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollectionV2Body):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
