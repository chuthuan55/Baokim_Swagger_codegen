# coding: utf-8

"""
     Installment docs API

    <a href='/baokim-firm-open-api-9050'>1: Function Check Installment Support </a>  <a href='/baokim-firm-open-api-9051'>2: Function Get Bank Loan Package </a>  <a href='/baokim-firm-open-api-9052'>3: Function Create Transaction </a>  <a href='/baokim-firm-open-api-9062'>4: Function Cancel order</a>  Private key and public key Baokim is currently using digital signature by RSA-SHA1  There are several ways to generate RSA key pairs.  Way 1:  Generate your RSA key pairs online: <a href=\"http://travistidwell.com/blog/2013/09/06/an-online-rsa-public-and-private-key-generator/\" target=\"_blank\">Generate now</a>  Way 2:  Using OpenSSL software for Windows:  Step 1: Download the software at:  http://slproweb.com/products/Win32OpenSSL.html. Partner should download the installer \"OpenSSL_Light-1_0_2k\". Then install in any directory, for example \"C:\\OpenSSLWin64\"  Step 2: Access \"C:\\OpenSSLWin64\\bin\" then open the command prompt. Type the command to declare the environment config.  set OPENSSL_CONF=C:\\OpenSSL-Win64\\bin\\openssl.cfg  Step 3: Generate private key and public key  openssl genrsa -aes256 -out c:\\opensslkeys\\partner\\partner_privatekey.pem 2048  openssl rsa â€“in c:\\opensslkeys\\partner\\partner_privatekey.pem -pubout >c:\\opensslkeys\\partner\\partner_publickey.pem  After successful pairing, Partner will send back to Baokim the public key to authenticate the signature that the Partner sends via the API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2001DataBankList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name_vi': 'str',
        'bank_short_name': 'str',
        'bank_code': 'str',
        'card_fee': 'str',
        'head_no_accept': 'list[str]',
        'minimum_require': 'str',
        'loan_packages': 'list[InlineResponse2001DataLoanPackages]'
    }

    attribute_map = {
        'name_vi': 'NameVi',
        'bank_short_name': 'BankShortName',
        'bank_code': 'BankCode',
        'card_fee': 'CardFee',
        'head_no_accept': 'HeadNoAccept',
        'minimum_require': 'MinimumRequire',
        'loan_packages': 'LoanPackages'
    }

    def __init__(self, name_vi=None, bank_short_name=None, bank_code=None, card_fee=None, head_no_accept=None, minimum_require=None, loan_packages=None):  # noqa: E501
        """InlineResponse2001DataBankList - a model defined in Swagger"""  # noqa: E501
        self._name_vi = None
        self._bank_short_name = None
        self._bank_code = None
        self._card_fee = None
        self._head_no_accept = None
        self._minimum_require = None
        self._loan_packages = None
        self.discriminator = None
        if name_vi is not None:
            self.name_vi = name_vi
        if bank_short_name is not None:
            self.bank_short_name = bank_short_name
        if bank_code is not None:
            self.bank_code = bank_code
        if card_fee is not None:
            self.card_fee = card_fee
        if head_no_accept is not None:
            self.head_no_accept = head_no_accept
        if minimum_require is not None:
            self.minimum_require = minimum_require
        if loan_packages is not None:
            self.loan_packages = loan_packages

    @property
    def name_vi(self):
        """Gets the name_vi of this InlineResponse2001DataBankList.  # noqa: E501


        :return: The name_vi of this InlineResponse2001DataBankList.  # noqa: E501
        :rtype: str
        """
        return self._name_vi

    @name_vi.setter
    def name_vi(self, name_vi):
        """Sets the name_vi of this InlineResponse2001DataBankList.


        :param name_vi: The name_vi of this InlineResponse2001DataBankList.  # noqa: E501
        :type: str
        """

        self._name_vi = name_vi

    @property
    def bank_short_name(self):
        """Gets the bank_short_name of this InlineResponse2001DataBankList.  # noqa: E501


        :return: The bank_short_name of this InlineResponse2001DataBankList.  # noqa: E501
        :rtype: str
        """
        return self._bank_short_name

    @bank_short_name.setter
    def bank_short_name(self, bank_short_name):
        """Sets the bank_short_name of this InlineResponse2001DataBankList.


        :param bank_short_name: The bank_short_name of this InlineResponse2001DataBankList.  # noqa: E501
        :type: str
        """

        self._bank_short_name = bank_short_name

    @property
    def bank_code(self):
        """Gets the bank_code of this InlineResponse2001DataBankList.  # noqa: E501


        :return: The bank_code of this InlineResponse2001DataBankList.  # noqa: E501
        :rtype: str
        """
        return self._bank_code

    @bank_code.setter
    def bank_code(self, bank_code):
        """Sets the bank_code of this InlineResponse2001DataBankList.


        :param bank_code: The bank_code of this InlineResponse2001DataBankList.  # noqa: E501
        :type: str
        """

        self._bank_code = bank_code

    @property
    def card_fee(self):
        """Gets the card_fee of this InlineResponse2001DataBankList.  # noqa: E501


        :return: The card_fee of this InlineResponse2001DataBankList.  # noqa: E501
        :rtype: str
        """
        return self._card_fee

    @card_fee.setter
    def card_fee(self, card_fee):
        """Sets the card_fee of this InlineResponse2001DataBankList.


        :param card_fee: The card_fee of this InlineResponse2001DataBankList.  # noqa: E501
        :type: str
        """

        self._card_fee = card_fee

    @property
    def head_no_accept(self):
        """Gets the head_no_accept of this InlineResponse2001DataBankList.  # noqa: E501


        :return: The head_no_accept of this InlineResponse2001DataBankList.  # noqa: E501
        :rtype: list[str]
        """
        return self._head_no_accept

    @head_no_accept.setter
    def head_no_accept(self, head_no_accept):
        """Sets the head_no_accept of this InlineResponse2001DataBankList.


        :param head_no_accept: The head_no_accept of this InlineResponse2001DataBankList.  # noqa: E501
        :type: list[str]
        """

        self._head_no_accept = head_no_accept

    @property
    def minimum_require(self):
        """Gets the minimum_require of this InlineResponse2001DataBankList.  # noqa: E501


        :return: The minimum_require of this InlineResponse2001DataBankList.  # noqa: E501
        :rtype: str
        """
        return self._minimum_require

    @minimum_require.setter
    def minimum_require(self, minimum_require):
        """Sets the minimum_require of this InlineResponse2001DataBankList.


        :param minimum_require: The minimum_require of this InlineResponse2001DataBankList.  # noqa: E501
        :type: str
        """

        self._minimum_require = minimum_require

    @property
    def loan_packages(self):
        """Gets the loan_packages of this InlineResponse2001DataBankList.  # noqa: E501


        :return: The loan_packages of this InlineResponse2001DataBankList.  # noqa: E501
        :rtype: list[InlineResponse2001DataLoanPackages]
        """
        return self._loan_packages

    @loan_packages.setter
    def loan_packages(self, loan_packages):
        """Sets the loan_packages of this InlineResponse2001DataBankList.


        :param loan_packages: The loan_packages of this InlineResponse2001DataBankList.  # noqa: E501
        :type: list[InlineResponse2001DataLoanPackages]
        """

        self._loan_packages = loan_packages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2001DataBankList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001DataBankList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
