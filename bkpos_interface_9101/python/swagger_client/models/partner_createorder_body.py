# coding: utf-8

"""
     Installment docs API

    <a href='/baokim-firm-open-api-9050'>1: Function Check Installment Support </a>  <a href='/baokim-firm-open-api-9051'>2: Function Get Bank Loan Package </a>  <a href='/baokim-firm-open-api-9052'>3: Function Create Transaction </a>  <a href='/baokim-firm-open-api-9062'>4: Function Cancel order</a>  Private key and public key Baokim is currently using digital signature by RSA-SHA1  There are several ways to generate RSA key pairs.  Way 1:  Generate your RSA key pairs online: <a href=\"http://travistidwell.com/blog/2013/09/06/an-online-rsa-public-and-private-key-generator/\" target=\"_blank\">Generate now</a>  Way 2:  Using OpenSSL software for Windows:  Step 1: Download the software at:  http://slproweb.com/products/Win32OpenSSL.html. Partner should download the installer \"OpenSSL_Light-1_0_2k\". Then install in any directory, for example \"C:\\OpenSSLWin64\"  Step 2: Access \"C:\\OpenSSLWin64\\bin\" then open the command prompt. Type the command to declare the environment config.  set OPENSSL_CONF=C:\\OpenSSL-Win64\\bin\\openssl.cfg  Step 3: Generate private key and public key  openssl genrsa -aes256 -out c:\\opensslkeys\\partner\\partner_privatekey.pem 2048  openssl rsa â€“in c:\\opensslkeys\\partner\\partner_privatekey.pem -pubout >c:\\opensslkeys\\partner\\partner_publickey.pem  After successful pairing, Partner will send back to Baokim the public key to authenticate the signature that the Partner sends via the API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PartnerCreateorderBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_id': 'str',
        'request_time': 'str',
        'partner_code': 'str',
        'operation': 'str',
        'card_no': 'str',
        'bank_code': 'str',
        'customer_name': 'str',
        'customer_phone': 'str',
        'customer_email': 'str',
        'customer_address': 'str',
        'client_id_no': 'str',
        'auth_code': 'str',
        'down_payment': 'str',
        'reference_id': 'str',
        'original_price': 'str',
        'total_payment_amount': 'str',
        'conversion_money': 'str',
        'pay_per_month': 'str',
        'installment_amount': 'str',
        'grace_period': 'str',
        'time_tran': 'str'
    }

    attribute_map = {
        'request_id': 'RequestId',
        'request_time': 'RequestTime',
        'partner_code': 'PartnerCode',
        'operation': 'Operation',
        'card_no': 'CardNo',
        'bank_code': 'BankCode',
        'customer_name': 'CustomerName',
        'customer_phone': 'CustomerPhone',
        'customer_email': 'CustomerEmail',
        'customer_address': 'CustomerAddress',
        'client_id_no': 'ClientIdNo',
        'auth_code': 'AuthCode',
        'down_payment': 'DownPayment',
        'reference_id': 'ReferenceId',
        'original_price': 'OriginalPrice',
        'total_payment_amount': 'TotalPaymentAmount',
        'conversion_money': 'ConversionMoney',
        'pay_per_month': 'PayPerMonth',
        'installment_amount': 'InstallmentAmount',
        'grace_period': 'GracePeriod',
        'time_tran': 'TimeTran'
    }

    def __init__(self, request_id=None, request_time=None, partner_code=None, operation=None, card_no=None, bank_code=None, customer_name=None, customer_phone=None, customer_email=None, customer_address=None, client_id_no=None, auth_code=None, down_payment=None, reference_id=None, original_price=None, total_payment_amount=None, conversion_money=None, pay_per_month=None, installment_amount=None, grace_period=None, time_tran=None):  # noqa: E501
        """PartnerCreateorderBody - a model defined in Swagger"""  # noqa: E501
        self._request_id = None
        self._request_time = None
        self._partner_code = None
        self._operation = None
        self._card_no = None
        self._bank_code = None
        self._customer_name = None
        self._customer_phone = None
        self._customer_email = None
        self._customer_address = None
        self._client_id_no = None
        self._auth_code = None
        self._down_payment = None
        self._reference_id = None
        self._original_price = None
        self._total_payment_amount = None
        self._conversion_money = None
        self._pay_per_month = None
        self._installment_amount = None
        self._grace_period = None
        self._time_tran = None
        self.discriminator = None
        if request_id is not None:
            self.request_id = request_id
        if request_time is not None:
            self.request_time = request_time
        if partner_code is not None:
            self.partner_code = partner_code
        if operation is not None:
            self.operation = operation
        if card_no is not None:
            self.card_no = card_no
        if bank_code is not None:
            self.bank_code = bank_code
        if customer_name is not None:
            self.customer_name = customer_name
        if customer_phone is not None:
            self.customer_phone = customer_phone
        if customer_email is not None:
            self.customer_email = customer_email
        if customer_address is not None:
            self.customer_address = customer_address
        if client_id_no is not None:
            self.client_id_no = client_id_no
        if auth_code is not None:
            self.auth_code = auth_code
        if down_payment is not None:
            self.down_payment = down_payment
        if reference_id is not None:
            self.reference_id = reference_id
        if original_price is not None:
            self.original_price = original_price
        if total_payment_amount is not None:
            self.total_payment_amount = total_payment_amount
        if conversion_money is not None:
            self.conversion_money = conversion_money
        if pay_per_month is not None:
            self.pay_per_month = pay_per_month
        if installment_amount is not None:
            self.installment_amount = installment_amount
        if grace_period is not None:
            self.grace_period = grace_period
        if time_tran is not None:
            self.time_tran = time_tran

    @property
    def request_id(self):
        """Gets the request_id of this PartnerCreateorderBody.  # noqa: E501


        :return: The request_id of this PartnerCreateorderBody.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this PartnerCreateorderBody.


        :param request_id: The request_id of this PartnerCreateorderBody.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def request_time(self):
        """Gets the request_time of this PartnerCreateorderBody.  # noqa: E501


        :return: The request_time of this PartnerCreateorderBody.  # noqa: E501
        :rtype: str
        """
        return self._request_time

    @request_time.setter
    def request_time(self, request_time):
        """Sets the request_time of this PartnerCreateorderBody.


        :param request_time: The request_time of this PartnerCreateorderBody.  # noqa: E501
        :type: str
        """

        self._request_time = request_time

    @property
    def partner_code(self):
        """Gets the partner_code of this PartnerCreateorderBody.  # noqa: E501


        :return: The partner_code of this PartnerCreateorderBody.  # noqa: E501
        :rtype: str
        """
        return self._partner_code

    @partner_code.setter
    def partner_code(self, partner_code):
        """Sets the partner_code of this PartnerCreateorderBody.


        :param partner_code: The partner_code of this PartnerCreateorderBody.  # noqa: E501
        :type: str
        """

        self._partner_code = partner_code

    @property
    def operation(self):
        """Gets the operation of this PartnerCreateorderBody.  # noqa: E501


        :return: The operation of this PartnerCreateorderBody.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this PartnerCreateorderBody.


        :param operation: The operation of this PartnerCreateorderBody.  # noqa: E501
        :type: str
        """

        self._operation = operation

    @property
    def card_no(self):
        """Gets the card_no of this PartnerCreateorderBody.  # noqa: E501


        :return: The card_no of this PartnerCreateorderBody.  # noqa: E501
        :rtype: str
        """
        return self._card_no

    @card_no.setter
    def card_no(self, card_no):
        """Sets the card_no of this PartnerCreateorderBody.


        :param card_no: The card_no of this PartnerCreateorderBody.  # noqa: E501
        :type: str
        """

        self._card_no = card_no

    @property
    def bank_code(self):
        """Gets the bank_code of this PartnerCreateorderBody.  # noqa: E501


        :return: The bank_code of this PartnerCreateorderBody.  # noqa: E501
        :rtype: str
        """
        return self._bank_code

    @bank_code.setter
    def bank_code(self, bank_code):
        """Sets the bank_code of this PartnerCreateorderBody.


        :param bank_code: The bank_code of this PartnerCreateorderBody.  # noqa: E501
        :type: str
        """

        self._bank_code = bank_code

    @property
    def customer_name(self):
        """Gets the customer_name of this PartnerCreateorderBody.  # noqa: E501


        :return: The customer_name of this PartnerCreateorderBody.  # noqa: E501
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this PartnerCreateorderBody.


        :param customer_name: The customer_name of this PartnerCreateorderBody.  # noqa: E501
        :type: str
        """

        self._customer_name = customer_name

    @property
    def customer_phone(self):
        """Gets the customer_phone of this PartnerCreateorderBody.  # noqa: E501


        :return: The customer_phone of this PartnerCreateorderBody.  # noqa: E501
        :rtype: str
        """
        return self._customer_phone

    @customer_phone.setter
    def customer_phone(self, customer_phone):
        """Sets the customer_phone of this PartnerCreateorderBody.


        :param customer_phone: The customer_phone of this PartnerCreateorderBody.  # noqa: E501
        :type: str
        """

        self._customer_phone = customer_phone

    @property
    def customer_email(self):
        """Gets the customer_email of this PartnerCreateorderBody.  # noqa: E501


        :return: The customer_email of this PartnerCreateorderBody.  # noqa: E501
        :rtype: str
        """
        return self._customer_email

    @customer_email.setter
    def customer_email(self, customer_email):
        """Sets the customer_email of this PartnerCreateorderBody.


        :param customer_email: The customer_email of this PartnerCreateorderBody.  # noqa: E501
        :type: str
        """

        self._customer_email = customer_email

    @property
    def customer_address(self):
        """Gets the customer_address of this PartnerCreateorderBody.  # noqa: E501


        :return: The customer_address of this PartnerCreateorderBody.  # noqa: E501
        :rtype: str
        """
        return self._customer_address

    @customer_address.setter
    def customer_address(self, customer_address):
        """Sets the customer_address of this PartnerCreateorderBody.


        :param customer_address: The customer_address of this PartnerCreateorderBody.  # noqa: E501
        :type: str
        """

        self._customer_address = customer_address

    @property
    def client_id_no(self):
        """Gets the client_id_no of this PartnerCreateorderBody.  # noqa: E501


        :return: The client_id_no of this PartnerCreateorderBody.  # noqa: E501
        :rtype: str
        """
        return self._client_id_no

    @client_id_no.setter
    def client_id_no(self, client_id_no):
        """Sets the client_id_no of this PartnerCreateorderBody.


        :param client_id_no: The client_id_no of this PartnerCreateorderBody.  # noqa: E501
        :type: str
        """

        self._client_id_no = client_id_no

    @property
    def auth_code(self):
        """Gets the auth_code of this PartnerCreateorderBody.  # noqa: E501


        :return: The auth_code of this PartnerCreateorderBody.  # noqa: E501
        :rtype: str
        """
        return self._auth_code

    @auth_code.setter
    def auth_code(self, auth_code):
        """Sets the auth_code of this PartnerCreateorderBody.


        :param auth_code: The auth_code of this PartnerCreateorderBody.  # noqa: E501
        :type: str
        """

        self._auth_code = auth_code

    @property
    def down_payment(self):
        """Gets the down_payment of this PartnerCreateorderBody.  # noqa: E501


        :return: The down_payment of this PartnerCreateorderBody.  # noqa: E501
        :rtype: str
        """
        return self._down_payment

    @down_payment.setter
    def down_payment(self, down_payment):
        """Sets the down_payment of this PartnerCreateorderBody.


        :param down_payment: The down_payment of this PartnerCreateorderBody.  # noqa: E501
        :type: str
        """

        self._down_payment = down_payment

    @property
    def reference_id(self):
        """Gets the reference_id of this PartnerCreateorderBody.  # noqa: E501


        :return: The reference_id of this PartnerCreateorderBody.  # noqa: E501
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this PartnerCreateorderBody.


        :param reference_id: The reference_id of this PartnerCreateorderBody.  # noqa: E501
        :type: str
        """

        self._reference_id = reference_id

    @property
    def original_price(self):
        """Gets the original_price of this PartnerCreateorderBody.  # noqa: E501


        :return: The original_price of this PartnerCreateorderBody.  # noqa: E501
        :rtype: str
        """
        return self._original_price

    @original_price.setter
    def original_price(self, original_price):
        """Sets the original_price of this PartnerCreateorderBody.


        :param original_price: The original_price of this PartnerCreateorderBody.  # noqa: E501
        :type: str
        """

        self._original_price = original_price

    @property
    def total_payment_amount(self):
        """Gets the total_payment_amount of this PartnerCreateorderBody.  # noqa: E501


        :return: The total_payment_amount of this PartnerCreateorderBody.  # noqa: E501
        :rtype: str
        """
        return self._total_payment_amount

    @total_payment_amount.setter
    def total_payment_amount(self, total_payment_amount):
        """Sets the total_payment_amount of this PartnerCreateorderBody.


        :param total_payment_amount: The total_payment_amount of this PartnerCreateorderBody.  # noqa: E501
        :type: str
        """

        self._total_payment_amount = total_payment_amount

    @property
    def conversion_money(self):
        """Gets the conversion_money of this PartnerCreateorderBody.  # noqa: E501


        :return: The conversion_money of this PartnerCreateorderBody.  # noqa: E501
        :rtype: str
        """
        return self._conversion_money

    @conversion_money.setter
    def conversion_money(self, conversion_money):
        """Sets the conversion_money of this PartnerCreateorderBody.


        :param conversion_money: The conversion_money of this PartnerCreateorderBody.  # noqa: E501
        :type: str
        """

        self._conversion_money = conversion_money

    @property
    def pay_per_month(self):
        """Gets the pay_per_month of this PartnerCreateorderBody.  # noqa: E501


        :return: The pay_per_month of this PartnerCreateorderBody.  # noqa: E501
        :rtype: str
        """
        return self._pay_per_month

    @pay_per_month.setter
    def pay_per_month(self, pay_per_month):
        """Sets the pay_per_month of this PartnerCreateorderBody.


        :param pay_per_month: The pay_per_month of this PartnerCreateorderBody.  # noqa: E501
        :type: str
        """

        self._pay_per_month = pay_per_month

    @property
    def installment_amount(self):
        """Gets the installment_amount of this PartnerCreateorderBody.  # noqa: E501


        :return: The installment_amount of this PartnerCreateorderBody.  # noqa: E501
        :rtype: str
        """
        return self._installment_amount

    @installment_amount.setter
    def installment_amount(self, installment_amount):
        """Sets the installment_amount of this PartnerCreateorderBody.


        :param installment_amount: The installment_amount of this PartnerCreateorderBody.  # noqa: E501
        :type: str
        """

        self._installment_amount = installment_amount

    @property
    def grace_period(self):
        """Gets the grace_period of this PartnerCreateorderBody.  # noqa: E501


        :return: The grace_period of this PartnerCreateorderBody.  # noqa: E501
        :rtype: str
        """
        return self._grace_period

    @grace_period.setter
    def grace_period(self, grace_period):
        """Sets the grace_period of this PartnerCreateorderBody.


        :param grace_period: The grace_period of this PartnerCreateorderBody.  # noqa: E501
        :type: str
        """

        self._grace_period = grace_period

    @property
    def time_tran(self):
        """Gets the time_tran of this PartnerCreateorderBody.  # noqa: E501


        :return: The time_tran of this PartnerCreateorderBody.  # noqa: E501
        :rtype: str
        """
        return self._time_tran

    @time_tran.setter
    def time_tran(self, time_tran):
        """Sets the time_tran of this PartnerCreateorderBody.


        :param time_tran: The time_tran of this PartnerCreateorderBody.  # noqa: E501
        :type: str
        """

        self._time_tran = time_tran

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PartnerCreateorderBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartnerCreateorderBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
