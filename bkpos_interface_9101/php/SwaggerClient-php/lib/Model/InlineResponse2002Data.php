<?php
/**
 * InlineResponse2002Data
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Installment docs API
 *
 * <a href='/baokim-firm-open-api-9050'>1: Function Check Installment Support </a>  <a href='/baokim-firm-open-api-9051'>2: Function Get Bank Loan Package </a>  <a href='/baokim-firm-open-api-9052'>3: Function Create Transaction </a>  <a href='/baokim-firm-open-api-9062'>4: Function Cancel order</a>  Private key and public key Baokim is currently using digital signature by RSA-SHA1  There are several ways to generate RSA key pairs.  Way 1:  Generate your RSA key pairs online: <a href=\"http://travistidwell.com/blog/2013/09/06/an-online-rsa-public-and-private-key-generator/\" target=\"_blank\">Generate now</a>  Way 2:  Using OpenSSL software for Windows:  Step 1: Download the software at:  http://slproweb.com/products/Win32OpenSSL.html. Partner should download the installer \"OpenSSL_Light-1_0_2k\". Then install in any directory, for example \"C:\\OpenSSLWin64\"  Step 2: Access \"C:\\OpenSSLWin64\\bin\" then open the command prompt. Type the command to declare the environment config.  set OPENSSL_CONF=C:\\OpenSSL-Win64\\bin\\openssl.cfg  Step 3: Generate private key and public key  openssl genrsa -aes256 -out c:\\opensslkeys\\partner\\partner_privatekey.pem 2048  openssl rsa â€“in c:\\opensslkeys\\partner\\partner_privatekey.pem -pubout >c:\\opensslkeys\\partner\\partner_publickey.pem  After successful pairing, Partner will send back to Baokim the public key to authenticate the signature that the Partner sends via the API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2002Data Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2002Data implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_2_Data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'request_id' => 'string',
'request_time' => 'string',
'card_no' => 'string',
'bank_code' => 'string',
'operation' => 'string',
'partner_code' => 'string',
'customer_name' => 'string',
'customer_phone' => 'string',
'customer_email' => 'string',
'product_name' => 'string',
'client_id_no' => 'string',
'auth_code' => 'string',
'down_payment' => 'string',
'original_price' => 'string',
'conversion_money' => 'string',
'pay_per_month' => 'string',
'installment_amount' => 'string',
'total_payment_amount' => 'string',
'reference_id' => 'string',
'bk_trans_id' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'request_id' => null,
'request_time' => null,
'card_no' => null,
'bank_code' => null,
'operation' => null,
'partner_code' => null,
'customer_name' => null,
'customer_phone' => null,
'customer_email' => null,
'product_name' => null,
'client_id_no' => null,
'auth_code' => null,
'down_payment' => null,
'original_price' => null,
'conversion_money' => null,
'pay_per_month' => null,
'installment_amount' => null,
'total_payment_amount' => null,
'reference_id' => null,
'bk_trans_id' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'request_id' => 'RequestId',
'request_time' => 'RequestTime',
'card_no' => 'CardNo',
'bank_code' => 'BankCode',
'operation' => 'Operation',
'partner_code' => 'PartnerCode',
'customer_name' => 'CustomerName',
'customer_phone' => 'CustomerPhone',
'customer_email' => 'CustomerEmail',
'product_name' => 'ProductName',
'client_id_no' => 'ClientIdNo',
'auth_code' => 'AuthCode',
'down_payment' => 'DownPayment',
'original_price' => 'OriginalPrice',
'conversion_money' => 'ConversionMoney',
'pay_per_month' => 'PayPerMonth',
'installment_amount' => 'InstallmentAmount',
'total_payment_amount' => 'TotalPaymentAmount',
'reference_id' => 'ReferenceId',
'bk_trans_id' => 'BkTransId'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'request_id' => 'setRequestId',
'request_time' => 'setRequestTime',
'card_no' => 'setCardNo',
'bank_code' => 'setBankCode',
'operation' => 'setOperation',
'partner_code' => 'setPartnerCode',
'customer_name' => 'setCustomerName',
'customer_phone' => 'setCustomerPhone',
'customer_email' => 'setCustomerEmail',
'product_name' => 'setProductName',
'client_id_no' => 'setClientIdNo',
'auth_code' => 'setAuthCode',
'down_payment' => 'setDownPayment',
'original_price' => 'setOriginalPrice',
'conversion_money' => 'setConversionMoney',
'pay_per_month' => 'setPayPerMonth',
'installment_amount' => 'setInstallmentAmount',
'total_payment_amount' => 'setTotalPaymentAmount',
'reference_id' => 'setReferenceId',
'bk_trans_id' => 'setBkTransId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'request_id' => 'getRequestId',
'request_time' => 'getRequestTime',
'card_no' => 'getCardNo',
'bank_code' => 'getBankCode',
'operation' => 'getOperation',
'partner_code' => 'getPartnerCode',
'customer_name' => 'getCustomerName',
'customer_phone' => 'getCustomerPhone',
'customer_email' => 'getCustomerEmail',
'product_name' => 'getProductName',
'client_id_no' => 'getClientIdNo',
'auth_code' => 'getAuthCode',
'down_payment' => 'getDownPayment',
'original_price' => 'getOriginalPrice',
'conversion_money' => 'getConversionMoney',
'pay_per_month' => 'getPayPerMonth',
'installment_amount' => 'getInstallmentAmount',
'total_payment_amount' => 'getTotalPaymentAmount',
'reference_id' => 'getReferenceId',
'bk_trans_id' => 'getBkTransId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['request_id'] = isset($data['request_id']) ? $data['request_id'] : null;
        $this->container['request_time'] = isset($data['request_time']) ? $data['request_time'] : null;
        $this->container['card_no'] = isset($data['card_no']) ? $data['card_no'] : null;
        $this->container['bank_code'] = isset($data['bank_code']) ? $data['bank_code'] : null;
        $this->container['operation'] = isset($data['operation']) ? $data['operation'] : null;
        $this->container['partner_code'] = isset($data['partner_code']) ? $data['partner_code'] : null;
        $this->container['customer_name'] = isset($data['customer_name']) ? $data['customer_name'] : null;
        $this->container['customer_phone'] = isset($data['customer_phone']) ? $data['customer_phone'] : null;
        $this->container['customer_email'] = isset($data['customer_email']) ? $data['customer_email'] : null;
        $this->container['product_name'] = isset($data['product_name']) ? $data['product_name'] : null;
        $this->container['client_id_no'] = isset($data['client_id_no']) ? $data['client_id_no'] : null;
        $this->container['auth_code'] = isset($data['auth_code']) ? $data['auth_code'] : null;
        $this->container['down_payment'] = isset($data['down_payment']) ? $data['down_payment'] : null;
        $this->container['original_price'] = isset($data['original_price']) ? $data['original_price'] : null;
        $this->container['conversion_money'] = isset($data['conversion_money']) ? $data['conversion_money'] : null;
        $this->container['pay_per_month'] = isset($data['pay_per_month']) ? $data['pay_per_month'] : null;
        $this->container['installment_amount'] = isset($data['installment_amount']) ? $data['installment_amount'] : null;
        $this->container['total_payment_amount'] = isset($data['total_payment_amount']) ? $data['total_payment_amount'] : null;
        $this->container['reference_id'] = isset($data['reference_id']) ? $data['reference_id'] : null;
        $this->container['bk_trans_id'] = isset($data['bk_trans_id']) ? $data['bk_trans_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets request_id
     *
     * @return string
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     *
     * @param string $request_id request_id
     *
     * @return $this
     */
    public function setRequestId($request_id)
    {
        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets request_time
     *
     * @return string
     */
    public function getRequestTime()
    {
        return $this->container['request_time'];
    }

    /**
     * Sets request_time
     *
     * @param string $request_time request_time
     *
     * @return $this
     */
    public function setRequestTime($request_time)
    {
        $this->container['request_time'] = $request_time;

        return $this;
    }

    /**
     * Gets card_no
     *
     * @return string
     */
    public function getCardNo()
    {
        return $this->container['card_no'];
    }

    /**
     * Sets card_no
     *
     * @param string $card_no card_no
     *
     * @return $this
     */
    public function setCardNo($card_no)
    {
        $this->container['card_no'] = $card_no;

        return $this;
    }

    /**
     * Gets bank_code
     *
     * @return string
     */
    public function getBankCode()
    {
        return $this->container['bank_code'];
    }

    /**
     * Sets bank_code
     *
     * @param string $bank_code bank_code
     *
     * @return $this
     */
    public function setBankCode($bank_code)
    {
        $this->container['bank_code'] = $bank_code;

        return $this;
    }

    /**
     * Gets operation
     *
     * @return string
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param string $operation operation
     *
     * @return $this
     */
    public function setOperation($operation)
    {
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets partner_code
     *
     * @return string
     */
    public function getPartnerCode()
    {
        return $this->container['partner_code'];
    }

    /**
     * Sets partner_code
     *
     * @param string $partner_code partner_code
     *
     * @return $this
     */
    public function setPartnerCode($partner_code)
    {
        $this->container['partner_code'] = $partner_code;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return string
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string $customer_name customer_name
     *
     * @return $this
     */
    public function setCustomerName($customer_name)
    {
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets customer_phone
     *
     * @return string
     */
    public function getCustomerPhone()
    {
        return $this->container['customer_phone'];
    }

    /**
     * Sets customer_phone
     *
     * @param string $customer_phone customer_phone
     *
     * @return $this
     */
    public function setCustomerPhone($customer_phone)
    {
        $this->container['customer_phone'] = $customer_phone;

        return $this;
    }

    /**
     * Gets customer_email
     *
     * @return string
     */
    public function getCustomerEmail()
    {
        return $this->container['customer_email'];
    }

    /**
     * Sets customer_email
     *
     * @param string $customer_email customer_email
     *
     * @return $this
     */
    public function setCustomerEmail($customer_email)
    {
        $this->container['customer_email'] = $customer_email;

        return $this;
    }

    /**
     * Gets product_name
     *
     * @return string
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string $product_name product_name
     *
     * @return $this
     */
    public function setProductName($product_name)
    {
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets client_id_no
     *
     * @return string
     */
    public function getClientIdNo()
    {
        return $this->container['client_id_no'];
    }

    /**
     * Sets client_id_no
     *
     * @param string $client_id_no client_id_no
     *
     * @return $this
     */
    public function setClientIdNo($client_id_no)
    {
        $this->container['client_id_no'] = $client_id_no;

        return $this;
    }

    /**
     * Gets auth_code
     *
     * @return string
     */
    public function getAuthCode()
    {
        return $this->container['auth_code'];
    }

    /**
     * Sets auth_code
     *
     * @param string $auth_code auth_code
     *
     * @return $this
     */
    public function setAuthCode($auth_code)
    {
        $this->container['auth_code'] = $auth_code;

        return $this;
    }

    /**
     * Gets down_payment
     *
     * @return string
     */
    public function getDownPayment()
    {
        return $this->container['down_payment'];
    }

    /**
     * Sets down_payment
     *
     * @param string $down_payment down_payment
     *
     * @return $this
     */
    public function setDownPayment($down_payment)
    {
        $this->container['down_payment'] = $down_payment;

        return $this;
    }

    /**
     * Gets original_price
     *
     * @return string
     */
    public function getOriginalPrice()
    {
        return $this->container['original_price'];
    }

    /**
     * Sets original_price
     *
     * @param string $original_price original_price
     *
     * @return $this
     */
    public function setOriginalPrice($original_price)
    {
        $this->container['original_price'] = $original_price;

        return $this;
    }

    /**
     * Gets conversion_money
     *
     * @return string
     */
    public function getConversionMoney()
    {
        return $this->container['conversion_money'];
    }

    /**
     * Sets conversion_money
     *
     * @param string $conversion_money conversion_money
     *
     * @return $this
     */
    public function setConversionMoney($conversion_money)
    {
        $this->container['conversion_money'] = $conversion_money;

        return $this;
    }

    /**
     * Gets pay_per_month
     *
     * @return string
     */
    public function getPayPerMonth()
    {
        return $this->container['pay_per_month'];
    }

    /**
     * Sets pay_per_month
     *
     * @param string $pay_per_month pay_per_month
     *
     * @return $this
     */
    public function setPayPerMonth($pay_per_month)
    {
        $this->container['pay_per_month'] = $pay_per_month;

        return $this;
    }

    /**
     * Gets installment_amount
     *
     * @return string
     */
    public function getInstallmentAmount()
    {
        return $this->container['installment_amount'];
    }

    /**
     * Sets installment_amount
     *
     * @param string $installment_amount installment_amount
     *
     * @return $this
     */
    public function setInstallmentAmount($installment_amount)
    {
        $this->container['installment_amount'] = $installment_amount;

        return $this;
    }

    /**
     * Gets total_payment_amount
     *
     * @return string
     */
    public function getTotalPaymentAmount()
    {
        return $this->container['total_payment_amount'];
    }

    /**
     * Sets total_payment_amount
     *
     * @param string $total_payment_amount total_payment_amount
     *
     * @return $this
     */
    public function setTotalPaymentAmount($total_payment_amount)
    {
        $this->container['total_payment_amount'] = $total_payment_amount;

        return $this;
    }

    /**
     * Gets reference_id
     *
     * @return string
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param string $reference_id reference_id
     *
     * @return $this
     */
    public function setReferenceId($reference_id)
    {
        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets bk_trans_id
     *
     * @return string
     */
    public function getBkTransId()
    {
        return $this->container['bk_trans_id'];
    }

    /**
     * Sets bk_trans_id
     *
     * @param string $bk_trans_id bk_trans_id
     *
     * @return $this
     */
    public function setBkTransId($bk_trans_id)
    {
        $this->container['bk_trans_id'] = $bk_trans_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
