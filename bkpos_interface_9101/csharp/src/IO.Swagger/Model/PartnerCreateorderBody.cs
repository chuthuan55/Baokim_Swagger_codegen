/* 
 *  Installment docs API
 *
 * <a href='/baokim-firm-open-api-9050'>1: Function Check Installment Support </a>  <a href='/baokim-firm-open-api-9051'>2: Function Get Bank Loan Package </a>  <a href='/baokim-firm-open-api-9052'>3: Function Create Transaction </a>  <a href='/baokim-firm-open-api-9062'>4: Function Cancel order</a>  Private key and public key Baokim is currently using digital signature by RSA-SHA1  There are several ways to generate RSA key pairs.  Way 1:  Generate your RSA key pairs online: <a href=\"http://travistidwell.com/blog/2013/09/06/an-online-rsa-public-and-private-key-generator/\" target=\"_blank\">Generate now</a>  Way 2:  Using OpenSSL software for Windows:  Step 1: Download the software at:  http://slproweb.com/products/Win32OpenSSL.html. Partner should download the installer \"OpenSSL_Light-1_0_2k\". Then install in any directory, for example \"C:\\OpenSSLWin64\"  Step 2: Access \"C:\\OpenSSLWin64\\bin\" then open the command prompt. Type the command to declare the environment config.  set OPENSSL_CONF=C:\\OpenSSL-Win64\\bin\\openssl.cfg  Step 3: Generate private key and public key  openssl genrsa -aes256 -out c:\\opensslkeys\\partner\\partner_privatekey.pem 2048  openssl rsa â€“in c:\\opensslkeys\\partner\\partner_privatekey.pem -pubout >c:\\opensslkeys\\partner\\partner_publickey.pem  After successful pairing, Partner will send back to Baokim the public key to authenticate the signature that the Partner sends via the API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PartnerCreateorderBody
    /// </summary>
    [DataContract]
        public partial class PartnerCreateorderBody :  IEquatable<PartnerCreateorderBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PartnerCreateorderBody" /> class.
        /// </summary>
        /// <param name="requestId">requestId.</param>
        /// <param name="requestTime">requestTime.</param>
        /// <param name="partnerCode">partnerCode.</param>
        /// <param name="operation">operation.</param>
        /// <param name="cardNo">cardNo.</param>
        /// <param name="bankCode">bankCode.</param>
        /// <param name="customerName">customerName.</param>
        /// <param name="customerPhone">customerPhone.</param>
        /// <param name="customerEmail">customerEmail.</param>
        /// <param name="customerAddress">customerAddress.</param>
        /// <param name="clientIdNo">clientIdNo.</param>
        /// <param name="authCode">authCode.</param>
        /// <param name="downPayment">downPayment.</param>
        /// <param name="referenceId">referenceId.</param>
        /// <param name="originalPrice">originalPrice.</param>
        /// <param name="totalPaymentAmount">totalPaymentAmount.</param>
        /// <param name="conversionMoney">conversionMoney.</param>
        /// <param name="payPerMonth">payPerMonth.</param>
        /// <param name="installmentAmount">installmentAmount.</param>
        /// <param name="gracePeriod">gracePeriod.</param>
        /// <param name="timeTran">timeTran.</param>
        public PartnerCreateorderBody(string requestId = default(string), string requestTime = default(string), string partnerCode = default(string), string operation = default(string), string cardNo = default(string), string bankCode = default(string), string customerName = default(string), string customerPhone = default(string), string customerEmail = default(string), string customerAddress = default(string), string clientIdNo = default(string), string authCode = default(string), string downPayment = default(string), string referenceId = default(string), string originalPrice = default(string), string totalPaymentAmount = default(string), string conversionMoney = default(string), string payPerMonth = default(string), string installmentAmount = default(string), string gracePeriod = default(string), string timeTran = default(string))
        {
            this.RequestId = requestId;
            this.RequestTime = requestTime;
            this.PartnerCode = partnerCode;
            this.Operation = operation;
            this.CardNo = cardNo;
            this.BankCode = bankCode;
            this.CustomerName = customerName;
            this.CustomerPhone = customerPhone;
            this.CustomerEmail = customerEmail;
            this.CustomerAddress = customerAddress;
            this.ClientIdNo = clientIdNo;
            this.AuthCode = authCode;
            this.DownPayment = downPayment;
            this.ReferenceId = referenceId;
            this.OriginalPrice = originalPrice;
            this.TotalPaymentAmount = totalPaymentAmount;
            this.ConversionMoney = conversionMoney;
            this.PayPerMonth = payPerMonth;
            this.InstallmentAmount = installmentAmount;
            this.GracePeriod = gracePeriod;
            this.TimeTran = timeTran;
        }
        
        /// <summary>
        /// Gets or Sets RequestId
        /// </summary>
        [DataMember(Name="RequestId", EmitDefaultValue=false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Gets or Sets RequestTime
        /// </summary>
        [DataMember(Name="RequestTime", EmitDefaultValue=false)]
        public string RequestTime { get; set; }

        /// <summary>
        /// Gets or Sets PartnerCode
        /// </summary>
        [DataMember(Name="PartnerCode", EmitDefaultValue=false)]
        public string PartnerCode { get; set; }

        /// <summary>
        /// Gets or Sets Operation
        /// </summary>
        [DataMember(Name="Operation", EmitDefaultValue=false)]
        public string Operation { get; set; }

        /// <summary>
        /// Gets or Sets CardNo
        /// </summary>
        [DataMember(Name="CardNo", EmitDefaultValue=false)]
        public string CardNo { get; set; }

        /// <summary>
        /// Gets or Sets BankCode
        /// </summary>
        [DataMember(Name="BankCode", EmitDefaultValue=false)]
        public string BankCode { get; set; }

        /// <summary>
        /// Gets or Sets CustomerName
        /// </summary>
        [DataMember(Name="CustomerName", EmitDefaultValue=false)]
        public string CustomerName { get; set; }

        /// <summary>
        /// Gets or Sets CustomerPhone
        /// </summary>
        [DataMember(Name="CustomerPhone", EmitDefaultValue=false)]
        public string CustomerPhone { get; set; }

        /// <summary>
        /// Gets or Sets CustomerEmail
        /// </summary>
        [DataMember(Name="CustomerEmail", EmitDefaultValue=false)]
        public string CustomerEmail { get; set; }

        /// <summary>
        /// Gets or Sets CustomerAddress
        /// </summary>
        [DataMember(Name="CustomerAddress", EmitDefaultValue=false)]
        public string CustomerAddress { get; set; }

        /// <summary>
        /// Gets or Sets ClientIdNo
        /// </summary>
        [DataMember(Name="ClientIdNo", EmitDefaultValue=false)]
        public string ClientIdNo { get; set; }

        /// <summary>
        /// Gets or Sets AuthCode
        /// </summary>
        [DataMember(Name="AuthCode", EmitDefaultValue=false)]
        public string AuthCode { get; set; }

        /// <summary>
        /// Gets or Sets DownPayment
        /// </summary>
        [DataMember(Name="DownPayment", EmitDefaultValue=false)]
        public string DownPayment { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceId
        /// </summary>
        [DataMember(Name="ReferenceId", EmitDefaultValue=false)]
        public string ReferenceId { get; set; }

        /// <summary>
        /// Gets or Sets OriginalPrice
        /// </summary>
        [DataMember(Name="OriginalPrice", EmitDefaultValue=false)]
        public string OriginalPrice { get; set; }

        /// <summary>
        /// Gets or Sets TotalPaymentAmount
        /// </summary>
        [DataMember(Name="TotalPaymentAmount", EmitDefaultValue=false)]
        public string TotalPaymentAmount { get; set; }

        /// <summary>
        /// Gets or Sets ConversionMoney
        /// </summary>
        [DataMember(Name="ConversionMoney", EmitDefaultValue=false)]
        public string ConversionMoney { get; set; }

        /// <summary>
        /// Gets or Sets PayPerMonth
        /// </summary>
        [DataMember(Name="PayPerMonth", EmitDefaultValue=false)]
        public string PayPerMonth { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentAmount
        /// </summary>
        [DataMember(Name="InstallmentAmount", EmitDefaultValue=false)]
        public string InstallmentAmount { get; set; }

        /// <summary>
        /// Gets or Sets GracePeriod
        /// </summary>
        [DataMember(Name="GracePeriod", EmitDefaultValue=false)]
        public string GracePeriod { get; set; }

        /// <summary>
        /// Gets or Sets TimeTran
        /// </summary>
        [DataMember(Name="TimeTran", EmitDefaultValue=false)]
        public string TimeTran { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PartnerCreateorderBody {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  RequestTime: ").Append(RequestTime).Append("\n");
            sb.Append("  PartnerCode: ").Append(PartnerCode).Append("\n");
            sb.Append("  Operation: ").Append(Operation).Append("\n");
            sb.Append("  CardNo: ").Append(CardNo).Append("\n");
            sb.Append("  BankCode: ").Append(BankCode).Append("\n");
            sb.Append("  CustomerName: ").Append(CustomerName).Append("\n");
            sb.Append("  CustomerPhone: ").Append(CustomerPhone).Append("\n");
            sb.Append("  CustomerEmail: ").Append(CustomerEmail).Append("\n");
            sb.Append("  CustomerAddress: ").Append(CustomerAddress).Append("\n");
            sb.Append("  ClientIdNo: ").Append(ClientIdNo).Append("\n");
            sb.Append("  AuthCode: ").Append(AuthCode).Append("\n");
            sb.Append("  DownPayment: ").Append(DownPayment).Append("\n");
            sb.Append("  ReferenceId: ").Append(ReferenceId).Append("\n");
            sb.Append("  OriginalPrice: ").Append(OriginalPrice).Append("\n");
            sb.Append("  TotalPaymentAmount: ").Append(TotalPaymentAmount).Append("\n");
            sb.Append("  ConversionMoney: ").Append(ConversionMoney).Append("\n");
            sb.Append("  PayPerMonth: ").Append(PayPerMonth).Append("\n");
            sb.Append("  InstallmentAmount: ").Append(InstallmentAmount).Append("\n");
            sb.Append("  GracePeriod: ").Append(GracePeriod).Append("\n");
            sb.Append("  TimeTran: ").Append(TimeTran).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PartnerCreateorderBody);
        }

        /// <summary>
        /// Returns true if PartnerCreateorderBody instances are equal
        /// </summary>
        /// <param name="input">Instance of PartnerCreateorderBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PartnerCreateorderBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.RequestTime == input.RequestTime ||
                    (this.RequestTime != null &&
                    this.RequestTime.Equals(input.RequestTime))
                ) && 
                (
                    this.PartnerCode == input.PartnerCode ||
                    (this.PartnerCode != null &&
                    this.PartnerCode.Equals(input.PartnerCode))
                ) && 
                (
                    this.Operation == input.Operation ||
                    (this.Operation != null &&
                    this.Operation.Equals(input.Operation))
                ) && 
                (
                    this.CardNo == input.CardNo ||
                    (this.CardNo != null &&
                    this.CardNo.Equals(input.CardNo))
                ) && 
                (
                    this.BankCode == input.BankCode ||
                    (this.BankCode != null &&
                    this.BankCode.Equals(input.BankCode))
                ) && 
                (
                    this.CustomerName == input.CustomerName ||
                    (this.CustomerName != null &&
                    this.CustomerName.Equals(input.CustomerName))
                ) && 
                (
                    this.CustomerPhone == input.CustomerPhone ||
                    (this.CustomerPhone != null &&
                    this.CustomerPhone.Equals(input.CustomerPhone))
                ) && 
                (
                    this.CustomerEmail == input.CustomerEmail ||
                    (this.CustomerEmail != null &&
                    this.CustomerEmail.Equals(input.CustomerEmail))
                ) && 
                (
                    this.CustomerAddress == input.CustomerAddress ||
                    (this.CustomerAddress != null &&
                    this.CustomerAddress.Equals(input.CustomerAddress))
                ) && 
                (
                    this.ClientIdNo == input.ClientIdNo ||
                    (this.ClientIdNo != null &&
                    this.ClientIdNo.Equals(input.ClientIdNo))
                ) && 
                (
                    this.AuthCode == input.AuthCode ||
                    (this.AuthCode != null &&
                    this.AuthCode.Equals(input.AuthCode))
                ) && 
                (
                    this.DownPayment == input.DownPayment ||
                    (this.DownPayment != null &&
                    this.DownPayment.Equals(input.DownPayment))
                ) && 
                (
                    this.ReferenceId == input.ReferenceId ||
                    (this.ReferenceId != null &&
                    this.ReferenceId.Equals(input.ReferenceId))
                ) && 
                (
                    this.OriginalPrice == input.OriginalPrice ||
                    (this.OriginalPrice != null &&
                    this.OriginalPrice.Equals(input.OriginalPrice))
                ) && 
                (
                    this.TotalPaymentAmount == input.TotalPaymentAmount ||
                    (this.TotalPaymentAmount != null &&
                    this.TotalPaymentAmount.Equals(input.TotalPaymentAmount))
                ) && 
                (
                    this.ConversionMoney == input.ConversionMoney ||
                    (this.ConversionMoney != null &&
                    this.ConversionMoney.Equals(input.ConversionMoney))
                ) && 
                (
                    this.PayPerMonth == input.PayPerMonth ||
                    (this.PayPerMonth != null &&
                    this.PayPerMonth.Equals(input.PayPerMonth))
                ) && 
                (
                    this.InstallmentAmount == input.InstallmentAmount ||
                    (this.InstallmentAmount != null &&
                    this.InstallmentAmount.Equals(input.InstallmentAmount))
                ) && 
                (
                    this.GracePeriod == input.GracePeriod ||
                    (this.GracePeriod != null &&
                    this.GracePeriod.Equals(input.GracePeriod))
                ) && 
                (
                    this.TimeTran == input.TimeTran ||
                    (this.TimeTran != null &&
                    this.TimeTran.Equals(input.TimeTran))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                if (this.RequestTime != null)
                    hashCode = hashCode * 59 + this.RequestTime.GetHashCode();
                if (this.PartnerCode != null)
                    hashCode = hashCode * 59 + this.PartnerCode.GetHashCode();
                if (this.Operation != null)
                    hashCode = hashCode * 59 + this.Operation.GetHashCode();
                if (this.CardNo != null)
                    hashCode = hashCode * 59 + this.CardNo.GetHashCode();
                if (this.BankCode != null)
                    hashCode = hashCode * 59 + this.BankCode.GetHashCode();
                if (this.CustomerName != null)
                    hashCode = hashCode * 59 + this.CustomerName.GetHashCode();
                if (this.CustomerPhone != null)
                    hashCode = hashCode * 59 + this.CustomerPhone.GetHashCode();
                if (this.CustomerEmail != null)
                    hashCode = hashCode * 59 + this.CustomerEmail.GetHashCode();
                if (this.CustomerAddress != null)
                    hashCode = hashCode * 59 + this.CustomerAddress.GetHashCode();
                if (this.ClientIdNo != null)
                    hashCode = hashCode * 59 + this.ClientIdNo.GetHashCode();
                if (this.AuthCode != null)
                    hashCode = hashCode * 59 + this.AuthCode.GetHashCode();
                if (this.DownPayment != null)
                    hashCode = hashCode * 59 + this.DownPayment.GetHashCode();
                if (this.ReferenceId != null)
                    hashCode = hashCode * 59 + this.ReferenceId.GetHashCode();
                if (this.OriginalPrice != null)
                    hashCode = hashCode * 59 + this.OriginalPrice.GetHashCode();
                if (this.TotalPaymentAmount != null)
                    hashCode = hashCode * 59 + this.TotalPaymentAmount.GetHashCode();
                if (this.ConversionMoney != null)
                    hashCode = hashCode * 59 + this.ConversionMoney.GetHashCode();
                if (this.PayPerMonth != null)
                    hashCode = hashCode * 59 + this.PayPerMonth.GetHashCode();
                if (this.InstallmentAmount != null)
                    hashCode = hashCode * 59 + this.InstallmentAmount.GetHashCode();
                if (this.GracePeriod != null)
                    hashCode = hashCode * 59 + this.GracePeriod.GetHashCode();
                if (this.TimeTran != null)
                    hashCode = hashCode * 59 + this.TimeTran.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
