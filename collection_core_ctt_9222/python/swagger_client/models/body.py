# coding: utf-8

"""
    Collection payments

    <img src=\"https://devtest.baokim.vn/collection/core_ctt/image/Picture1.png\" class=\"image-collection-payment\" /> <p><strong>Note:</strong></p> <p>+ In case PARTNER want to use collect via Virtual Account, PARTNER will need to buid:</p> <p style=\"padding-left: 50px;\">     - <a href=\"#operations-Virtual_Account_4\\.0-8442c69ffbaf4b3677a52fa3ebcef6d4\">Register virtual account</a> <br>     - <a href=\"#operations-Virtual_Account_4\\.0-1796c61005edee3976097a607fe9dbaa\">Update virtual account informations</a> <br>     - <a href=\"#operations-tag-Notice_of_collection_transaction\">Notice of collection transaction</a> <br> </p>  # noqa: E501

    OpenAPI spec version: 2.3 and 4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Body(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_id': 'str',
        'request_time': 'str',
        'partner_code': 'str',
        'acc_no': 'String',
        'client_id_no': 'str',
        'trans_id': 'str',
        'trans_amount': 'float',
        'trans_time': 'str',
        'bef_trans_debt': 'float',
        'aff_trans_debt': 'float',
        'account_type': 'float',
        'order_id': 'float',
        'signature': 'str'
    }

    attribute_map = {
        'request_id': 'RequestId',
        'request_time': 'RequestTime',
        'partner_code': 'PartnerCode',
        'acc_no': 'AccNo',
        'client_id_no': 'ClientIdNo',
        'trans_id': 'TransId',
        'trans_amount': 'TransAmount',
        'trans_time': 'TransTime',
        'bef_trans_debt': 'BefTransDebt',
        'aff_trans_debt': 'AffTransDebt',
        'account_type': 'AccountType',
        'order_id': 'OrderId',
        'signature': 'Signature'
    }

    def __init__(self, request_id=None, request_time=None, partner_code=None, acc_no=None, client_id_no=None, trans_id=None, trans_amount=None, trans_time=None, bef_trans_debt=None, aff_trans_debt=None, account_type=None, order_id=None, signature=None):  # noqa: E501
        """Body - a model defined in Swagger"""  # noqa: E501
        self._request_id = None
        self._request_time = None
        self._partner_code = None
        self._acc_no = None
        self._client_id_no = None
        self._trans_id = None
        self._trans_amount = None
        self._trans_time = None
        self._bef_trans_debt = None
        self._aff_trans_debt = None
        self._account_type = None
        self._order_id = None
        self._signature = None
        self.discriminator = None
        if request_id is not None:
            self.request_id = request_id
        if request_time is not None:
            self.request_time = request_time
        if partner_code is not None:
            self.partner_code = partner_code
        if acc_no is not None:
            self.acc_no = acc_no
        if client_id_no is not None:
            self.client_id_no = client_id_no
        if trans_id is not None:
            self.trans_id = trans_id
        if trans_amount is not None:
            self.trans_amount = trans_amount
        if trans_time is not None:
            self.trans_time = trans_time
        if bef_trans_debt is not None:
            self.bef_trans_debt = bef_trans_debt
        if aff_trans_debt is not None:
            self.aff_trans_debt = aff_trans_debt
        if account_type is not None:
            self.account_type = account_type
        if order_id is not None:
            self.order_id = order_id
        if signature is not None:
            self.signature = signature

    @property
    def request_id(self):
        """Gets the request_id of this Body.  # noqa: E501

        Unique code   # noqa: E501

        :return: The request_id of this Body.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this Body.

        Unique code   # noqa: E501

        :param request_id: The request_id of this Body.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def request_time(self):
        """Gets the request_time of this Body.  # noqa: E501

        Time send the request from PARTNER , format: YYYY-MM-DD HH:MM:SS.  # noqa: E501

        :return: The request_time of this Body.  # noqa: E501
        :rtype: str
        """
        return self._request_time

    @request_time.setter
    def request_time(self, request_time):
        """Sets the request_time of this Body.

        Time send the request from PARTNER , format: YYYY-MM-DD HH:MM:SS.  # noqa: E501

        :param request_time: The request_time of this Body.  # noqa: E501
        :type: str
        """

        self._request_time = request_time

    @property
    def partner_code(self):
        """Gets the partner_code of this Body.  # noqa: E501

        Fix: BAOKIM  # noqa: E501

        :return: The partner_code of this Body.  # noqa: E501
        :rtype: str
        """
        return self._partner_code

    @partner_code.setter
    def partner_code(self, partner_code):
        """Sets the partner_code of this Body.

        Fix: BAOKIM  # noqa: E501

        :param partner_code: The partner_code of this Body.  # noqa: E501
        :type: str
        """

        self._partner_code = partner_code

    @property
    def acc_no(self):
        """Gets the acc_no of this Body.  # noqa: E501

        VA number  # noqa: E501

        :return: The acc_no of this Body.  # noqa: E501
        :rtype: String
        """
        return self._acc_no

    @acc_no.setter
    def acc_no(self, acc_no):
        """Sets the acc_no of this Body.

        VA number  # noqa: E501

        :param acc_no: The acc_no of this Body.  # noqa: E501
        :type: String
        """

        self._acc_no = acc_no

    @property
    def client_id_no(self):
        """Gets the client_id_no of this Body.  # noqa: E501

        Client id no  # noqa: E501

        :return: The client_id_no of this Body.  # noqa: E501
        :rtype: str
        """
        return self._client_id_no

    @client_id_no.setter
    def client_id_no(self, client_id_no):
        """Sets the client_id_no of this Body.

        Client id no  # noqa: E501

        :param client_id_no: The client_id_no of this Body.  # noqa: E501
        :type: str
        """

        self._client_id_no = client_id_no

    @property
    def trans_id(self):
        """Gets the trans_id of this Body.  # noqa: E501

        Unique transaction id in BAOKIM system  # noqa: E501

        :return: The trans_id of this Body.  # noqa: E501
        :rtype: str
        """
        return self._trans_id

    @trans_id.setter
    def trans_id(self, trans_id):
        """Sets the trans_id of this Body.

        Unique transaction id in BAOKIM system  # noqa: E501

        :param trans_id: The trans_id of this Body.  # noqa: E501
        :type: str
        """

        self._trans_id = trans_id

    @property
    def trans_amount(self):
        """Gets the trans_amount of this Body.  # noqa: E501

        collect amount   # noqa: E501

        :return: The trans_amount of this Body.  # noqa: E501
        :rtype: float
        """
        return self._trans_amount

    @trans_amount.setter
    def trans_amount(self, trans_amount):
        """Sets the trans_amount of this Body.

        collect amount   # noqa: E501

        :param trans_amount: The trans_amount of this Body.  # noqa: E501
        :type: float
        """

        self._trans_amount = trans_amount

    @property
    def trans_time(self):
        """Gets the trans_time of this Body.  # noqa: E501

        Transaction time at BAOKIM system   # noqa: E501

        :return: The trans_time of this Body.  # noqa: E501
        :rtype: str
        """
        return self._trans_time

    @trans_time.setter
    def trans_time(self, trans_time):
        """Sets the trans_time of this Body.

        Transaction time at BAOKIM system   # noqa: E501

        :param trans_time: The trans_time of this Body.  # noqa: E501
        :type: str
        """

        self._trans_time = trans_time

    @property
    def bef_trans_debt(self):
        """Gets the bef_trans_debt of this Body.  # noqa: E501

        Amount before transaction  # noqa: E501

        :return: The bef_trans_debt of this Body.  # noqa: E501
        :rtype: float
        """
        return self._bef_trans_debt

    @bef_trans_debt.setter
    def bef_trans_debt(self, bef_trans_debt):
        """Sets the bef_trans_debt of this Body.

        Amount before transaction  # noqa: E501

        :param bef_trans_debt: The bef_trans_debt of this Body.  # noqa: E501
        :type: float
        """

        self._bef_trans_debt = bef_trans_debt

    @property
    def aff_trans_debt(self):
        """Gets the aff_trans_debt of this Body.  # noqa: E501

        Amount after transaction  # noqa: E501

        :return: The aff_trans_debt of this Body.  # noqa: E501
        :rtype: float
        """
        return self._aff_trans_debt

    @aff_trans_debt.setter
    def aff_trans_debt(self, aff_trans_debt):
        """Sets the aff_trans_debt of this Body.

        Amount after transaction  # noqa: E501

        :param aff_trans_debt: The aff_trans_debt of this Body.  # noqa: E501
        :type: float
        """

        self._aff_trans_debt = aff_trans_debt

    @property
    def account_type(self):
        """Gets the account_type of this Body.  # noqa: E501

        Account with indentifier or without indentifier. 1: Account with identifier. 2: Account without identifier.  # noqa: E501

        :return: The account_type of this Body.  # noqa: E501
        :rtype: float
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this Body.

        Account with indentifier or without indentifier. 1: Account with identifier. 2: Account without identifier.  # noqa: E501

        :param account_type: The account_type of this Body.  # noqa: E501
        :type: float
        """

        self._account_type = account_type

    @property
    def order_id(self):
        """Gets the order_id of this Body.  # noqa: E501

        Unique id for each VA   # noqa: E501

        :return: The order_id of this Body.  # noqa: E501
        :rtype: float
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this Body.

        Unique id for each VA   # noqa: E501

        :param order_id: The order_id of this Body.  # noqa: E501
        :type: float
        """

        self._order_id = order_id

    @property
    def signature(self):
        """Gets the signature of this Body.  # noqa: E501

        BAOKIM will sign the data on the following structure sha1withRSA: RequestId|RequestTime|PartnerCode| AccNo|ClientIdNo|TransId|TransAmount| TransTime|BefTransDebt|AffTransDebt| AccountType|OrderId Then will use base64 encoding  # noqa: E501

        :return: The signature of this Body.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this Body.

        BAOKIM will sign the data on the following structure sha1withRSA: RequestId|RequestTime|PartnerCode| AccNo|ClientIdNo|TransId|TransAmount| TransTime|BefTransDebt|AffTransDebt| AccountType|OrderId Then will use base64 encoding  # noqa: E501

        :param signature: The signature of this Body.  # noqa: E501
        :type: str
        """

        self._signature = signature

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
