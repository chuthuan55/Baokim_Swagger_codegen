# coding: utf-8

"""
    Collection payments

    <img src=\"https://devtest.baokim.vn/collection/core_ctt/image/Picture1.png\" class=\"image-collection-payment\" /> <p><strong>Note:</strong></p> <p>+ In case PARTNER want to use collect via Virtual Account, PARTNER will need to buid:</p> <p style=\"padding-left: 50px;\">     - <a href=\"#operations-Virtual_Account_4\\.0-8442c69ffbaf4b3677a52fa3ebcef6d4\">Register virtual account</a> <br>     - <a href=\"#operations-Virtual_Account_4\\.0-1796c61005edee3976097a607fe9dbaa\">Update virtual account informations</a> <br>     - <a href=\"#operations-tag-Notice_of_collection_transaction\">Notice of collection transaction</a> <br> </p>  # noqa: E501

    OpenAPI spec version: 2.3 and 4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V4CreateBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_id': 'str',
        'request_time': 'str',
        'partner_code': 'str',
        'acc_name': 'str',
        'collect_amount': 'float',
        'order_id': 'str',
        'expire_date': 'str',
        'bank': 'str'
    }

    attribute_map = {
        'request_id': 'RequestId',
        'request_time': 'RequestTime',
        'partner_code': 'PartnerCode',
        'acc_name': 'AccName',
        'collect_amount': 'CollectAmount',
        'order_id': 'OrderId',
        'expire_date': 'ExpireDate',
        'bank': 'Bank'
    }

    def __init__(self, request_id=None, request_time=None, partner_code=None, acc_name=None, collect_amount=None, order_id=None, expire_date=None, bank=None):  # noqa: E501
        """V4CreateBody - a model defined in Swagger"""  # noqa: E501
        self._request_id = None
        self._request_time = None
        self._partner_code = None
        self._acc_name = None
        self._collect_amount = None
        self._order_id = None
        self._expire_date = None
        self._bank = None
        self.discriminator = None
        if request_id is not None:
            self.request_id = request_id
        if request_time is not None:
            self.request_time = request_time
        if partner_code is not None:
            self.partner_code = partner_code
        if acc_name is not None:
            self.acc_name = acc_name
        if collect_amount is not None:
            self.collect_amount = collect_amount
        if order_id is not None:
            self.order_id = order_id
        if expire_date is not None:
            self.expire_date = expire_date
        if bank is not None:
            self.bank = bank

    @property
    def request_id(self):
        """Gets the request_id of this V4CreateBody.  # noqa: E501

        Unique code   # noqa: E501

        :return: The request_id of this V4CreateBody.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this V4CreateBody.

        Unique code   # noqa: E501

        :param request_id: The request_id of this V4CreateBody.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def request_time(self):
        """Gets the request_time of this V4CreateBody.  # noqa: E501

        Time send the request from PARTNER , format: YYYY-MM-DD HH:MM:SS.  # noqa: E501

        :return: The request_time of this V4CreateBody.  # noqa: E501
        :rtype: str
        """
        return self._request_time

    @request_time.setter
    def request_time(self, request_time):
        """Sets the request_time of this V4CreateBody.

        Time send the request from PARTNER , format: YYYY-MM-DD HH:MM:SS.  # noqa: E501

        :param request_time: The request_time of this V4CreateBody.  # noqa: E501
        :type: str
        """

        self._request_time = request_time

    @property
    def partner_code(self):
        """Gets the partner_code of this V4CreateBody.  # noqa: E501

        Unique code BAOKIM provide  # noqa: E501

        :return: The partner_code of this V4CreateBody.  # noqa: E501
        :rtype: str
        """
        return self._partner_code

    @partner_code.setter
    def partner_code(self, partner_code):
        """Sets the partner_code of this V4CreateBody.

        Unique code BAOKIM provide  # noqa: E501

        :param partner_code: The partner_code of this V4CreateBody.  # noqa: E501
        :type: str
        """

        self._partner_code = partner_code

    @property
    def acc_name(self):
        """Gets the acc_name of this V4CreateBody.  # noqa: E501

        The name of Account holder (name of USER)  # noqa: E501

        :return: The acc_name of this V4CreateBody.  # noqa: E501
        :rtype: str
        """
        return self._acc_name

    @acc_name.setter
    def acc_name(self, acc_name):
        """Sets the acc_name of this V4CreateBody.

        The name of Account holder (name of USER)  # noqa: E501

        :param acc_name: The acc_name of this V4CreateBody.  # noqa: E501
        :type: str
        """

        self._acc_name = acc_name

    @property
    def collect_amount(self):
        """Gets the collect_amount of this V4CreateBody.  # noqa: E501

        collect amount   # noqa: E501

        :return: The collect_amount of this V4CreateBody.  # noqa: E501
        :rtype: float
        """
        return self._collect_amount

    @collect_amount.setter
    def collect_amount(self, collect_amount):
        """Sets the collect_amount of this V4CreateBody.

        collect amount   # noqa: E501

        :param collect_amount: The collect_amount of this V4CreateBody.  # noqa: E501
        :type: float
        """

        self._collect_amount = collect_amount

    @property
    def order_id(self):
        """Gets the order_id of this V4CreateBody.  # noqa: E501

        Unique id for each VA  # noqa: E501

        :return: The order_id of this V4CreateBody.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this V4CreateBody.

        Unique id for each VA  # noqa: E501

        :param order_id: The order_id of this V4CreateBody.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def expire_date(self):
        """Gets the expire_date of this V4CreateBody.  # noqa: E501

        Expire date. Format: YYYYMM-DD HH:II:SS  # noqa: E501

        :return: The expire_date of this V4CreateBody.  # noqa: E501
        :rtype: str
        """
        return self._expire_date

    @expire_date.setter
    def expire_date(self, expire_date):
        """Sets the expire_date of this V4CreateBody.

        Expire date. Format: YYYYMM-DD HH:II:SS  # noqa: E501

        :param expire_date: The expire_date of this V4CreateBody.  # noqa: E501
        :type: str
        """

        self._expire_date = expire_date

    @property
    def bank(self):
        """Gets the bank of this V4CreateBody.  # noqa: E501

        Bank  # noqa: E501

        :return: The bank of this V4CreateBody.  # noqa: E501
        :rtype: str
        """
        return self._bank

    @bank.setter
    def bank(self, bank):
        """Sets the bank of this V4CreateBody.

        Bank  # noqa: E501

        :param bank: The bank of this V4CreateBody.  # noqa: E501
        :type: str
        """

        self._bank = bank

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V4CreateBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V4CreateBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
