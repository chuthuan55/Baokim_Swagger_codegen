# coding: utf-8

"""
    Collection payments

    <img src=\"https://devtest.baokim.vn/collection/core_ctt/image/Picture1.png\" class=\"image-collection-payment\" /> <p><strong>Note:</strong></p> <p>+ In case PARTNER want to use collect via Virtual Account, PARTNER will need to buid:</p> <p style=\"padding-left: 50px;\">     - <a href=\"#operations-Virtual_Account_4\\.0-8442c69ffbaf4b3677a52fa3ebcef6d4\">Register virtual account</a> <br>     - <a href=\"#operations-Virtual_Account_4\\.0-1796c61005edee3976097a607fe9dbaa\">Update virtual account informations</a> <br>     - <a href=\"#operations-tag-Notice_of_collection_transaction\">Notice of collection transaction</a> <br> </p>  # noqa: E501

    OpenAPI spec version: 2.3 and 4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2001(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'response_code': 'float',
        'response_message': 'str',
        'reference_id': 'str',
        'acc_no': 'str',
        'aff_trans_debt': 'float',
        'signature': 'str'
    }

    attribute_map = {
        'response_code': 'ResponseCode',
        'response_message': 'ResponseMessage',
        'reference_id': 'ReferenceId',
        'acc_no': 'AccNo',
        'aff_trans_debt': 'AffTransDebt',
        'signature': 'Signature'
    }

    def __init__(self, response_code=None, response_message=None, reference_id=None, acc_no=None, aff_trans_debt=None, signature=None):  # noqa: E501
        """InlineResponse2001 - a model defined in Swagger"""  # noqa: E501
        self._response_code = None
        self._response_message = None
        self._reference_id = None
        self._acc_no = None
        self._aff_trans_debt = None
        self._signature = None
        self.discriminator = None
        if response_code is not None:
            self.response_code = response_code
        if response_message is not None:
            self.response_message = response_message
        if reference_id is not None:
            self.reference_id = reference_id
        if acc_no is not None:
            self.acc_no = acc_no
        if aff_trans_debt is not None:
            self.aff_trans_debt = aff_trans_debt
        if signature is not None:
            self.signature = signature

    @property
    def response_code(self):
        """Gets the response_code of this InlineResponse2001.  # noqa: E501

        Response code  # noqa: E501

        :return: The response_code of this InlineResponse2001.  # noqa: E501
        :rtype: float
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """Sets the response_code of this InlineResponse2001.

        Response code  # noqa: E501

        :param response_code: The response_code of this InlineResponse2001.  # noqa: E501
        :type: float
        """

        self._response_code = response_code

    @property
    def response_message(self):
        """Gets the response_message of this InlineResponse2001.  # noqa: E501

        Response message  # noqa: E501

        :return: The response_message of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._response_message

    @response_message.setter
    def response_message(self, response_message):
        """Sets the response_message of this InlineResponse2001.

        Response message  # noqa: E501

        :param response_message: The response_message of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._response_message = response_message

    @property
    def reference_id(self):
        """Gets the reference_id of this InlineResponse2001.  # noqa: E501

        Unique transaction id in PARTNER system  # noqa: E501

        :return: The reference_id of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this InlineResponse2001.

        Unique transaction id in PARTNER system  # noqa: E501

        :param reference_id: The reference_id of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._reference_id = reference_id

    @property
    def acc_no(self):
        """Gets the acc_no of this InlineResponse2001.  # noqa: E501

        Unique id for each VA  # noqa: E501

        :return: The acc_no of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._acc_no

    @acc_no.setter
    def acc_no(self, acc_no):
        """Sets the acc_no of this InlineResponse2001.

        Unique id for each VA  # noqa: E501

        :param acc_no: The acc_no of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._acc_no = acc_no

    @property
    def aff_trans_debt(self):
        """Gets the aff_trans_debt of this InlineResponse2001.  # noqa: E501

        Remain amount of VA  # noqa: E501

        :return: The aff_trans_debt of this InlineResponse2001.  # noqa: E501
        :rtype: float
        """
        return self._aff_trans_debt

    @aff_trans_debt.setter
    def aff_trans_debt(self, aff_trans_debt):
        """Sets the aff_trans_debt of this InlineResponse2001.

        Remain amount of VA  # noqa: E501

        :param aff_trans_debt: The aff_trans_debt of this InlineResponse2001.  # noqa: E501
        :type: float
        """

        self._aff_trans_debt = aff_trans_debt

    @property
    def signature(self):
        """Gets the signature of this InlineResponse2001.  # noqa: E501

        Baokim will sign with digital signature of data returned using RSACryptoServiceProvider. Returns the base64 encoding. Data is structured: ResponseCode|ResponseMessage|ReferenceId| AccNo|AffTransDebt  # noqa: E501

        :return: The signature of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this InlineResponse2001.

        Baokim will sign with digital signature of data returned using RSACryptoServiceProvider. Returns the base64 encoding. Data is structured: ResponseCode|ResponseMessage|ReferenceId| AccNo|AffTransDebt  # noqa: E501

        :param signature: The signature of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._signature = signature

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2001, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
