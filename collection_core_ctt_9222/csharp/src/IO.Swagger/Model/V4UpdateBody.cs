/* 
 * Collection payments
 *
 * <img src=\"https://devtest.baokim.vn/collection/core_ctt/image/Picture1.png\" class=\"image-collection-payment\" /> <p><strong>Note:</strong></p> <p>+ In case PARTNER want to use collect via Virtual Account, PARTNER will need to buid:</p> <p style=\"padding-left: 50px;\">     - <a href=\"#operations-Virtual_Account_4\\.0-8442c69ffbaf4b3677a52fa3ebcef6d4\">Register virtual account</a> <br>     - <a href=\"#operations-Virtual_Account_4\\.0-1796c61005edee3976097a607fe9dbaa\">Update virtual account informations</a> <br>     - <a href=\"#operations-tag-Notice_of_collection_transaction\">Notice of collection transaction</a> <br> </p>
 *
 * OpenAPI spec version: 2.3 and 4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// V4UpdateBody
    /// </summary>
    [DataContract]
        public partial class V4UpdateBody :  IEquatable<V4UpdateBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V4UpdateBody" /> class.
        /// </summary>
        /// <param name="requestId">Unique code .</param>
        /// <param name="requestTime">Time send the request from PARTNER , format: YYYY-MM-DD HH:MM:SS..</param>
        /// <param name="partnerCode">Unique code BAOKIM provide.</param>
        /// <param name="accNo">Required when update:VA number need to update information.</param>
        /// <param name="accName">The name of Account holder (name of USER).</param>
        /// <param name="collectAmount">collect amount .</param>
        /// <param name="orderId">Unique id for each VA.</param>
        /// <param name="expireDate">Expire date. Format: YYYYMM-DD HH:II:SS.</param>
        /// <param name="bank">Bank: VPBANK,BIDV,MSB,WOORIBANK.</param>
        public V4UpdateBody(string requestId = default(string), string requestTime = default(string), string partnerCode = default(string), string accNo = default(string), string accName = default(string), decimal? collectAmount = default(decimal?), string orderId = default(string), string expireDate = default(string), string bank = default(string))
        {
            this.RequestId = requestId;
            this.RequestTime = requestTime;
            this.PartnerCode = partnerCode;
            this.AccNo = accNo;
            this.AccName = accName;
            this.CollectAmount = collectAmount;
            this.OrderId = orderId;
            this.ExpireDate = expireDate;
            this.Bank = bank;
        }
        
        /// <summary>
        /// Unique code 
        /// </summary>
        /// <value>Unique code </value>
        [DataMember(Name="RequestId", EmitDefaultValue=false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Time send the request from PARTNER , format: YYYY-MM-DD HH:MM:SS.
        /// </summary>
        /// <value>Time send the request from PARTNER , format: YYYY-MM-DD HH:MM:SS.</value>
        [DataMember(Name="RequestTime", EmitDefaultValue=false)]
        public string RequestTime { get; set; }

        /// <summary>
        /// Unique code BAOKIM provide
        /// </summary>
        /// <value>Unique code BAOKIM provide</value>
        [DataMember(Name="PartnerCode", EmitDefaultValue=false)]
        public string PartnerCode { get; set; }

        /// <summary>
        /// Required when update:VA number need to update information
        /// </summary>
        /// <value>Required when update:VA number need to update information</value>
        [DataMember(Name="AccNo", EmitDefaultValue=false)]
        public string AccNo { get; set; }

        /// <summary>
        /// The name of Account holder (name of USER)
        /// </summary>
        /// <value>The name of Account holder (name of USER)</value>
        [DataMember(Name="AccName", EmitDefaultValue=false)]
        public string AccName { get; set; }

        /// <summary>
        /// collect amount 
        /// </summary>
        /// <value>collect amount </value>
        [DataMember(Name="CollectAmount", EmitDefaultValue=false)]
        public decimal? CollectAmount { get; set; }

        /// <summary>
        /// Unique id for each VA
        /// </summary>
        /// <value>Unique id for each VA</value>
        [DataMember(Name="OrderId", EmitDefaultValue=false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Expire date. Format: YYYYMM-DD HH:II:SS
        /// </summary>
        /// <value>Expire date. Format: YYYYMM-DD HH:II:SS</value>
        [DataMember(Name="ExpireDate", EmitDefaultValue=false)]
        public string ExpireDate { get; set; }

        /// <summary>
        /// Bank: VPBANK,BIDV,MSB,WOORIBANK
        /// </summary>
        /// <value>Bank: VPBANK,BIDV,MSB,WOORIBANK</value>
        [DataMember(Name="Bank", EmitDefaultValue=false)]
        public string Bank { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V4UpdateBody {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  RequestTime: ").Append(RequestTime).Append("\n");
            sb.Append("  PartnerCode: ").Append(PartnerCode).Append("\n");
            sb.Append("  AccNo: ").Append(AccNo).Append("\n");
            sb.Append("  AccName: ").Append(AccName).Append("\n");
            sb.Append("  CollectAmount: ").Append(CollectAmount).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  ExpireDate: ").Append(ExpireDate).Append("\n");
            sb.Append("  Bank: ").Append(Bank).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as V4UpdateBody);
        }

        /// <summary>
        /// Returns true if V4UpdateBody instances are equal
        /// </summary>
        /// <param name="input">Instance of V4UpdateBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V4UpdateBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.RequestTime == input.RequestTime ||
                    (this.RequestTime != null &&
                    this.RequestTime.Equals(input.RequestTime))
                ) && 
                (
                    this.PartnerCode == input.PartnerCode ||
                    (this.PartnerCode != null &&
                    this.PartnerCode.Equals(input.PartnerCode))
                ) && 
                (
                    this.AccNo == input.AccNo ||
                    (this.AccNo != null &&
                    this.AccNo.Equals(input.AccNo))
                ) && 
                (
                    this.AccName == input.AccName ||
                    (this.AccName != null &&
                    this.AccName.Equals(input.AccName))
                ) && 
                (
                    this.CollectAmount == input.CollectAmount ||
                    (this.CollectAmount != null &&
                    this.CollectAmount.Equals(input.CollectAmount))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.ExpireDate == input.ExpireDate ||
                    (this.ExpireDate != null &&
                    this.ExpireDate.Equals(input.ExpireDate))
                ) && 
                (
                    this.Bank == input.Bank ||
                    (this.Bank != null &&
                    this.Bank.Equals(input.Bank))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                if (this.RequestTime != null)
                    hashCode = hashCode * 59 + this.RequestTime.GetHashCode();
                if (this.PartnerCode != null)
                    hashCode = hashCode * 59 + this.PartnerCode.GetHashCode();
                if (this.AccNo != null)
                    hashCode = hashCode * 59 + this.AccNo.GetHashCode();
                if (this.AccName != null)
                    hashCode = hashCode * 59 + this.AccName.GetHashCode();
                if (this.CollectAmount != null)
                    hashCode = hashCode * 59 + this.CollectAmount.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.ExpireDate != null)
                    hashCode = hashCode * 59 + this.ExpireDate.GetHashCode();
                if (this.Bank != null)
                    hashCode = hashCode * 59 + this.Bank.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
