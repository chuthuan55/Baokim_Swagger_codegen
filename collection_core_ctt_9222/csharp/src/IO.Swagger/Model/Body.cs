/* 
 * Collection payments
 *
 * <img src=\"https://devtest.baokim.vn/collection/core_ctt/image/Picture1.png\" class=\"image-collection-payment\" /> <p><strong>Note:</strong></p> <p>+ In case PARTNER want to use collect via Virtual Account, PARTNER will need to buid:</p> <p style=\"padding-left: 50px;\">     - <a href=\"#operations-Virtual_Account_4\\.0-8442c69ffbaf4b3677a52fa3ebcef6d4\">Register virtual account</a> <br>     - <a href=\"#operations-Virtual_Account_4\\.0-1796c61005edee3976097a607fe9dbaa\">Update virtual account informations</a> <br>     - <a href=\"#operations-tag-Notice_of_collection_transaction\">Notice of collection transaction</a> <br> </p>
 *
 * OpenAPI spec version: 2.3 and 4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Body
    /// </summary>
    [DataContract]
        public partial class Body :  IEquatable<Body>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Body" /> class.
        /// </summary>
        /// <param name="requestId">Unique code .</param>
        /// <param name="requestTime">Time send the request from PARTNER , format: YYYY-MM-DD HH:MM:SS..</param>
        /// <param name="partnerCode">Fix: BAOKIM.</param>
        /// <param name="accNo">VA number.</param>
        /// <param name="clientIdNo">Client id no.</param>
        /// <param name="transId">Unique transaction id in BAOKIM system.</param>
        /// <param name="transAmount">collect amount .</param>
        /// <param name="transTime">Transaction time at BAOKIM system .</param>
        /// <param name="befTransDebt">Amount before transaction.</param>
        /// <param name="affTransDebt">Amount after transaction.</param>
        /// <param name="accountType">Account with indentifier or without indentifier. 1: Account with identifier. 2: Account without identifier..</param>
        /// <param name="orderId">Unique id for each VA .</param>
        /// <param name="signature">BAOKIM will sign the data on the following structure sha1withRSA: RequestId|RequestTime|PartnerCode| AccNo|ClientIdNo|TransId|TransAmount| TransTime|BefTransDebt|AffTransDebt| AccountType|OrderId Then will use base64 encoding.</param>
        public Body(string requestId = default(string), string requestTime = default(string), string partnerCode = default(string), string accNo = default(string), string clientIdNo = default(string), string transId = default(string), decimal? transAmount = default(decimal?), string transTime = default(string), decimal? befTransDebt = default(decimal?), decimal? affTransDebt = default(decimal?), decimal? accountType = default(decimal?), decimal? orderId = default(decimal?), string signature = default(string))
        {
            this.RequestId = requestId;
            this.RequestTime = requestTime;
            this.PartnerCode = partnerCode;
            this.AccNo = accNo;
            this.ClientIdNo = clientIdNo;
            this.TransId = transId;
            this.TransAmount = transAmount;
            this.TransTime = transTime;
            this.BefTransDebt = befTransDebt;
            this.AffTransDebt = affTransDebt;
            this.AccountType = accountType;
            this.OrderId = orderId;
            this.Signature = signature;
        }
        
        /// <summary>
        /// Unique code 
        /// </summary>
        /// <value>Unique code </value>
        [DataMember(Name="RequestId", EmitDefaultValue=false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Time send the request from PARTNER , format: YYYY-MM-DD HH:MM:SS.
        /// </summary>
        /// <value>Time send the request from PARTNER , format: YYYY-MM-DD HH:MM:SS.</value>
        [DataMember(Name="RequestTime", EmitDefaultValue=false)]
        public string RequestTime { get; set; }

        /// <summary>
        /// Fix: BAOKIM
        /// </summary>
        /// <value>Fix: BAOKIM</value>
        [DataMember(Name="PartnerCode", EmitDefaultValue=false)]
        public string PartnerCode { get; set; }

        /// <summary>
        /// VA number
        /// </summary>
        /// <value>VA number</value>
        [DataMember(Name="AccNo", EmitDefaultValue=false)]
        public string AccNo { get; set; }

        /// <summary>
        /// Client id no
        /// </summary>
        /// <value>Client id no</value>
        [DataMember(Name="ClientIdNo", EmitDefaultValue=false)]
        public string ClientIdNo { get; set; }

        /// <summary>
        /// Unique transaction id in BAOKIM system
        /// </summary>
        /// <value>Unique transaction id in BAOKIM system</value>
        [DataMember(Name="TransId", EmitDefaultValue=false)]
        public string TransId { get; set; }

        /// <summary>
        /// collect amount 
        /// </summary>
        /// <value>collect amount </value>
        [DataMember(Name="TransAmount", EmitDefaultValue=false)]
        public decimal? TransAmount { get; set; }

        /// <summary>
        /// Transaction time at BAOKIM system 
        /// </summary>
        /// <value>Transaction time at BAOKIM system </value>
        [DataMember(Name="TransTime", EmitDefaultValue=false)]
        public string TransTime { get; set; }

        /// <summary>
        /// Amount before transaction
        /// </summary>
        /// <value>Amount before transaction</value>
        [DataMember(Name="BefTransDebt", EmitDefaultValue=false)]
        public decimal? BefTransDebt { get; set; }

        /// <summary>
        /// Amount after transaction
        /// </summary>
        /// <value>Amount after transaction</value>
        [DataMember(Name="AffTransDebt", EmitDefaultValue=false)]
        public decimal? AffTransDebt { get; set; }

        /// <summary>
        /// Account with indentifier or without indentifier. 1: Account with identifier. 2: Account without identifier.
        /// </summary>
        /// <value>Account with indentifier or without indentifier. 1: Account with identifier. 2: Account without identifier.</value>
        [DataMember(Name="AccountType", EmitDefaultValue=false)]
        public decimal? AccountType { get; set; }

        /// <summary>
        /// Unique id for each VA 
        /// </summary>
        /// <value>Unique id for each VA </value>
        [DataMember(Name="OrderId", EmitDefaultValue=false)]
        public decimal? OrderId { get; set; }

        /// <summary>
        /// BAOKIM will sign the data on the following structure sha1withRSA: RequestId|RequestTime|PartnerCode| AccNo|ClientIdNo|TransId|TransAmount| TransTime|BefTransDebt|AffTransDebt| AccountType|OrderId Then will use base64 encoding
        /// </summary>
        /// <value>BAOKIM will sign the data on the following structure sha1withRSA: RequestId|RequestTime|PartnerCode| AccNo|ClientIdNo|TransId|TransAmount| TransTime|BefTransDebt|AffTransDebt| AccountType|OrderId Then will use base64 encoding</value>
        [DataMember(Name="Signature", EmitDefaultValue=false)]
        public string Signature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Body {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  RequestTime: ").Append(RequestTime).Append("\n");
            sb.Append("  PartnerCode: ").Append(PartnerCode).Append("\n");
            sb.Append("  AccNo: ").Append(AccNo).Append("\n");
            sb.Append("  ClientIdNo: ").Append(ClientIdNo).Append("\n");
            sb.Append("  TransId: ").Append(TransId).Append("\n");
            sb.Append("  TransAmount: ").Append(TransAmount).Append("\n");
            sb.Append("  TransTime: ").Append(TransTime).Append("\n");
            sb.Append("  BefTransDebt: ").Append(BefTransDebt).Append("\n");
            sb.Append("  AffTransDebt: ").Append(AffTransDebt).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Body);
        }

        /// <summary>
        /// Returns true if Body instances are equal
        /// </summary>
        /// <param name="input">Instance of Body to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Body input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.RequestTime == input.RequestTime ||
                    (this.RequestTime != null &&
                    this.RequestTime.Equals(input.RequestTime))
                ) && 
                (
                    this.PartnerCode == input.PartnerCode ||
                    (this.PartnerCode != null &&
                    this.PartnerCode.Equals(input.PartnerCode))
                ) && 
                (
                    this.AccNo == input.AccNo ||
                    (this.AccNo != null &&
                    this.AccNo.Equals(input.AccNo))
                ) && 
                (
                    this.ClientIdNo == input.ClientIdNo ||
                    (this.ClientIdNo != null &&
                    this.ClientIdNo.Equals(input.ClientIdNo))
                ) && 
                (
                    this.TransId == input.TransId ||
                    (this.TransId != null &&
                    this.TransId.Equals(input.TransId))
                ) && 
                (
                    this.TransAmount == input.TransAmount ||
                    (this.TransAmount != null &&
                    this.TransAmount.Equals(input.TransAmount))
                ) && 
                (
                    this.TransTime == input.TransTime ||
                    (this.TransTime != null &&
                    this.TransTime.Equals(input.TransTime))
                ) && 
                (
                    this.BefTransDebt == input.BefTransDebt ||
                    (this.BefTransDebt != null &&
                    this.BefTransDebt.Equals(input.BefTransDebt))
                ) && 
                (
                    this.AffTransDebt == input.AffTransDebt ||
                    (this.AffTransDebt != null &&
                    this.AffTransDebt.Equals(input.AffTransDebt))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    (this.AccountType != null &&
                    this.AccountType.Equals(input.AccountType))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.Signature == input.Signature ||
                    (this.Signature != null &&
                    this.Signature.Equals(input.Signature))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                if (this.RequestTime != null)
                    hashCode = hashCode * 59 + this.RequestTime.GetHashCode();
                if (this.PartnerCode != null)
                    hashCode = hashCode * 59 + this.PartnerCode.GetHashCode();
                if (this.AccNo != null)
                    hashCode = hashCode * 59 + this.AccNo.GetHashCode();
                if (this.ClientIdNo != null)
                    hashCode = hashCode * 59 + this.ClientIdNo.GetHashCode();
                if (this.TransId != null)
                    hashCode = hashCode * 59 + this.TransId.GetHashCode();
                if (this.TransAmount != null)
                    hashCode = hashCode * 59 + this.TransAmount.GetHashCode();
                if (this.TransTime != null)
                    hashCode = hashCode * 59 + this.TransTime.GetHashCode();
                if (this.BefTransDebt != null)
                    hashCode = hashCode * 59 + this.BefTransDebt.GetHashCode();
                if (this.AffTransDebt != null)
                    hashCode = hashCode * 59 + this.AffTransDebt.GetHashCode();
                if (this.AccountType != null)
                    hashCode = hashCode * 59 + this.AccountType.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.Signature != null)
                    hashCode = hashCode * 59 + this.Signature.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
