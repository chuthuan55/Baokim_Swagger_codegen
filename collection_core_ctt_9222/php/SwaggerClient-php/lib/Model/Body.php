<?php
/**
 * Body
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Collection payments
 *
 * <img src=\"https://devtest.baokim.vn/collection/core_ctt/image/Picture1.png\" class=\"image-collection-payment\" /> <p><strong>Note:</strong></p> <p>+ In case PARTNER want to use collect via Virtual Account, PARTNER will need to buid:</p> <p style=\"padding-left: 50px;\">     - <a href=\"#operations-Virtual_Account_4\\.0-8442c69ffbaf4b3677a52fa3ebcef6d4\">Register virtual account</a> <br>     - <a href=\"#operations-Virtual_Account_4\\.0-1796c61005edee3976097a607fe9dbaa\">Update virtual account informations</a> <br>     - <a href=\"#operations-tag-Notice_of_collection_transaction\">Notice of collection transaction</a> <br> </p>
 *
 * OpenAPI spec version: 2.3 and 4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Body Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Body implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'request_id' => 'string',
'request_time' => 'string',
'partner_code' => 'string',
'acc_no' => 'String',
'client_id_no' => 'string',
'trans_id' => 'string',
'trans_amount' => 'float',
'trans_time' => 'string',
'bef_trans_debt' => 'float',
'aff_trans_debt' => 'float',
'account_type' => 'float',
'order_id' => 'float',
'signature' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'request_id' => null,
'request_time' => null,
'partner_code' => null,
'acc_no' => null,
'client_id_no' => null,
'trans_id' => null,
'trans_amount' => null,
'trans_time' => null,
'bef_trans_debt' => null,
'aff_trans_debt' => null,
'account_type' => null,
'order_id' => null,
'signature' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'request_id' => 'RequestId',
'request_time' => 'RequestTime',
'partner_code' => 'PartnerCode',
'acc_no' => 'AccNo',
'client_id_no' => 'ClientIdNo',
'trans_id' => 'TransId',
'trans_amount' => 'TransAmount',
'trans_time' => 'TransTime',
'bef_trans_debt' => 'BefTransDebt',
'aff_trans_debt' => 'AffTransDebt',
'account_type' => 'AccountType',
'order_id' => 'OrderId',
'signature' => 'Signature'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'request_id' => 'setRequestId',
'request_time' => 'setRequestTime',
'partner_code' => 'setPartnerCode',
'acc_no' => 'setAccNo',
'client_id_no' => 'setClientIdNo',
'trans_id' => 'setTransId',
'trans_amount' => 'setTransAmount',
'trans_time' => 'setTransTime',
'bef_trans_debt' => 'setBefTransDebt',
'aff_trans_debt' => 'setAffTransDebt',
'account_type' => 'setAccountType',
'order_id' => 'setOrderId',
'signature' => 'setSignature'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'request_id' => 'getRequestId',
'request_time' => 'getRequestTime',
'partner_code' => 'getPartnerCode',
'acc_no' => 'getAccNo',
'client_id_no' => 'getClientIdNo',
'trans_id' => 'getTransId',
'trans_amount' => 'getTransAmount',
'trans_time' => 'getTransTime',
'bef_trans_debt' => 'getBefTransDebt',
'aff_trans_debt' => 'getAffTransDebt',
'account_type' => 'getAccountType',
'order_id' => 'getOrderId',
'signature' => 'getSignature'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['request_id'] = isset($data['request_id']) ? $data['request_id'] : null;
        $this->container['request_time'] = isset($data['request_time']) ? $data['request_time'] : null;
        $this->container['partner_code'] = isset($data['partner_code']) ? $data['partner_code'] : null;
        $this->container['acc_no'] = isset($data['acc_no']) ? $data['acc_no'] : null;
        $this->container['client_id_no'] = isset($data['client_id_no']) ? $data['client_id_no'] : null;
        $this->container['trans_id'] = isset($data['trans_id']) ? $data['trans_id'] : null;
        $this->container['trans_amount'] = isset($data['trans_amount']) ? $data['trans_amount'] : null;
        $this->container['trans_time'] = isset($data['trans_time']) ? $data['trans_time'] : null;
        $this->container['bef_trans_debt'] = isset($data['bef_trans_debt']) ? $data['bef_trans_debt'] : null;
        $this->container['aff_trans_debt'] = isset($data['aff_trans_debt']) ? $data['aff_trans_debt'] : null;
        $this->container['account_type'] = isset($data['account_type']) ? $data['account_type'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['signature'] = isset($data['signature']) ? $data['signature'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets request_id
     *
     * @return string
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     *
     * @param string $request_id Unique code
     *
     * @return $this
     */
    public function setRequestId($request_id)
    {
        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets request_time
     *
     * @return string
     */
    public function getRequestTime()
    {
        return $this->container['request_time'];
    }

    /**
     * Sets request_time
     *
     * @param string $request_time Time send the request from PARTNER , format: YYYY-MM-DD HH:MM:SS.
     *
     * @return $this
     */
    public function setRequestTime($request_time)
    {
        $this->container['request_time'] = $request_time;

        return $this;
    }

    /**
     * Gets partner_code
     *
     * @return string
     */
    public function getPartnerCode()
    {
        return $this->container['partner_code'];
    }

    /**
     * Sets partner_code
     *
     * @param string $partner_code Fix: BAOKIM
     *
     * @return $this
     */
    public function setPartnerCode($partner_code)
    {
        $this->container['partner_code'] = $partner_code;

        return $this;
    }

    /**
     * Gets acc_no
     *
     * @return String
     */
    public function getAccNo()
    {
        return $this->container['acc_no'];
    }

    /**
     * Sets acc_no
     *
     * @param String $acc_no VA number
     *
     * @return $this
     */
    public function setAccNo($acc_no)
    {
        $this->container['acc_no'] = $acc_no;

        return $this;
    }

    /**
     * Gets client_id_no
     *
     * @return string
     */
    public function getClientIdNo()
    {
        return $this->container['client_id_no'];
    }

    /**
     * Sets client_id_no
     *
     * @param string $client_id_no Client id no
     *
     * @return $this
     */
    public function setClientIdNo($client_id_no)
    {
        $this->container['client_id_no'] = $client_id_no;

        return $this;
    }

    /**
     * Gets trans_id
     *
     * @return string
     */
    public function getTransId()
    {
        return $this->container['trans_id'];
    }

    /**
     * Sets trans_id
     *
     * @param string $trans_id Unique transaction id in BAOKIM system
     *
     * @return $this
     */
    public function setTransId($trans_id)
    {
        $this->container['trans_id'] = $trans_id;

        return $this;
    }

    /**
     * Gets trans_amount
     *
     * @return float
     */
    public function getTransAmount()
    {
        return $this->container['trans_amount'];
    }

    /**
     * Sets trans_amount
     *
     * @param float $trans_amount collect amount
     *
     * @return $this
     */
    public function setTransAmount($trans_amount)
    {
        $this->container['trans_amount'] = $trans_amount;

        return $this;
    }

    /**
     * Gets trans_time
     *
     * @return string
     */
    public function getTransTime()
    {
        return $this->container['trans_time'];
    }

    /**
     * Sets trans_time
     *
     * @param string $trans_time Transaction time at BAOKIM system
     *
     * @return $this
     */
    public function setTransTime($trans_time)
    {
        $this->container['trans_time'] = $trans_time;

        return $this;
    }

    /**
     * Gets bef_trans_debt
     *
     * @return float
     */
    public function getBefTransDebt()
    {
        return $this->container['bef_trans_debt'];
    }

    /**
     * Sets bef_trans_debt
     *
     * @param float $bef_trans_debt Amount before transaction
     *
     * @return $this
     */
    public function setBefTransDebt($bef_trans_debt)
    {
        $this->container['bef_trans_debt'] = $bef_trans_debt;

        return $this;
    }

    /**
     * Gets aff_trans_debt
     *
     * @return float
     */
    public function getAffTransDebt()
    {
        return $this->container['aff_trans_debt'];
    }

    /**
     * Sets aff_trans_debt
     *
     * @param float $aff_trans_debt Amount after transaction
     *
     * @return $this
     */
    public function setAffTransDebt($aff_trans_debt)
    {
        $this->container['aff_trans_debt'] = $aff_trans_debt;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return float
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param float $account_type Account with indentifier or without indentifier. 1: Account with identifier. 2: Account without identifier.
     *
     * @return $this
     */
    public function setAccountType($account_type)
    {
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return float
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param float $order_id Unique id for each VA
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets signature
     *
     * @return string
     */
    public function getSignature()
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     *
     * @param string $signature BAOKIM will sign the data on the following structure sha1withRSA: RequestId|RequestTime|PartnerCode| AccNo|ClientIdNo|TransId|TransAmount| TransTime|BefTransDebt|AffTransDebt| AccountType|OrderId Then will use base64 encoding
     *
     * @return $this
     */
    public function setSignature($signature)
    {
        $this->container['signature'] = $signature;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
